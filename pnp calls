
$.ajax({
    url: "_api/web/lists/getByTitle('Users')/items?$filter=" + filter,
    method: "GET",
    headers: {
        "Accept": "application/json; odata=nometadata"
    },
    success: function(data) {
        // Handle the retrieved data here
        console.log(data);
    },
    error: function(error) {
        // Handle errors here
        console.log("Error: " + JSON.stringify(error));
    }
});

==================
var result = sp.web.lists.getByTitle('Users').items.
                         filter(filter).
                         get();
======
var _this = this;
var searchedIds = [];

return new Promise<any>((resolve, reject) => {
    // Replace the SharePoint search with jQuery Ajax
    $.ajax({
        url: "_api/search/query?querytext=" + _this.keyword + " path:https://pfizer.sharepoint.com/sites/PolicyPoint-UAT/Policy%20Documents/*" + "&rowlimit=" + _this.count + "&startrow=" + _this.setRow + "&selectproperties=RefinableInt00,RefinableString00&trimduplicates=false",
        method: "GET",
        headers: {
            "Accept": "application/json; odata=nometadata"
        },
        success: function (data) {
            console.log("Data", data);
            var primarySearchResults = data.PrimaryQueryResult.RelevantResults.Table.Rows.results;
            for (var j = 0; j < primarySearchResults.length; j++) {
                var ids = primarySearchResults[j].Cells.results.find(function (cell) { return cell.Key === 'RefinableInt00'; }).Value;
                var docType = primarySearchResults[j].Cells.results.find(function (cell) { return cell.Key === 'RefinableString00'; }).Value;
                if (ids != "") {
                    searchedIds.push(parseInt(ids));
                }
                _this.setRow += 1;
                console.log("ids", searchedIds);
            }

            if (primarySearchResults.length < _this.count) {
                // Replace this with your own logic
                // var result = this.getenterpricelistdata(this.props.userLanguage, this.keyword);
                // result.then(data => {
                //     searchedIds = searchedIds.concat(data);
                //     resolve(searchedIds);
                // });
            } else {
                // Replace this with your own logic
                // var result1 = this.getenterpriceSearchedPolicies();
                // result1.then(function (data) {
                //     searchedIds = searchedIds.concat(data);
                //     resolve(searchedIds);
                // });
            }
            _this.poldoc.push(searchedIds);
            resolve(searchedIds);
        },
        error: function (error) {
            reject(error);
        }
    });
});

============
var _this = this;
          var searchedIds = [];
          //var siteUrl1="https://pfizer.sharepoint.com/sites/PolicyPoint-UAT/CauCar"
          return new Promise<any>((resolve, reject) =>
          {
            
            sp.search({Querytext : this.keyword+" path:https://pfizer.sharepoint.com/sites/PolicyPoint-UAT/Policy%20Documents/*", 
            RowLimit:_this.count,
            StartRow:_this.setRow,
            SelectProperties: ["RefinableInt00","RefinableString00"],
            TrimDuplicates: false
            }).
            then((p: SearchResults) => {
                console.log("P",p)
                for(var j=0 ; j <p.PrimarySearchResults.length ; j++)
                {
                    var ids = p.PrimarySearchResults[j]["RefinableInt00"];
                    var docType = p.PrimarySearchResults[j]["RefinableString00"];
                    if(ids != "")
                        searchedIds.push(parseInt(ids));
                    _this.setRow += 1;
                    console.log("ids",searchedIds)
                                   }
                                
                if(p.PrimarySearchResults.length < _this.count)
                {
                    var result = this.getenterpricelistdata(this.props.userLanguage,this.keyword);
                    result.then(data => {
                        searchedIds = searchedIds.concat(data);
                        resolve(searchedIds);
                                           });
                }
                else
                {                   
                    var result1 = this.getenterpriceSearchedPolicies();
                    result1.then(function(data){
                        searchedIds = searchedIds.concat(data);
                        resolve(searchedIds);
                                           });
                }
                this.poldoc.push(searchedIds)
            });
         });
        }
======
var _this = this;
          var searchedIds = [];
          //var siteUrl1="https://pfizer.sharepoint.com/sites/PolicyPoint-UAT/CauCar"
          return new Promise<any>((resolve, reject) =>
          {
            
            sp.search({Querytext : this.keyword+" path:https://pfizer.sharepoint.com/sites/PolicyPoint-UAT/Policy%20Documents/*", 
            RowLimit:_this.count,
            StartRow:_this.setRow,
            SelectProperties: ["RefinableInt00","RefinableString00"],
            TrimDuplicates: false
            }).
            then((p: SearchResults) => {
                console.log("P",p)
                for(var j=0 ; j <p.PrimarySearchResults.length ; j++)
                {
                    var ids = p.PrimarySearchResults[j]["RefinableInt00"];
                    var docType = p.PrimarySearchResults[j]["RefinableString00"];
                    if(ids != "")
                        searchedIds.push(parseInt(ids));
                    _this.setRow += 1;
                    console.log("ids",searchedIds)
                                   }
                                
                if(p.PrimarySearchResults.length < _this.count)
                {
                    var result = this.getenterpricelistdata(this.props.userLanguage,this.keyword);
                    result.then(data => {
                        searchedIds = searchedIds.concat(data);
                        resolve(searchedIds);
                                           });
                }
                else
                {                   
                    var result1 = this.getenterpriceSearchedPolicies();
                    result1.then(function(data){
                        searchedIds = searchedIds.concat(data);
                        resolve(searchedIds);
                                           });
                }
                this.poldoc.push(searchedIds)
            });
         });
        }
=================
var listName = '';
var filter = '';
if (lang == 'English') {
    listName = 'Policies';
    filter = "Status ne 'Retired'";
} else {
    listName = 'TranslatedPolicies';
    filter = "Status ne 'Retired' and Language eq '" + lang + "'";
}

$.ajax({
    url: "_api/web/lists/getByTitle('" + listName + "')/items?$filter=" + filter + "&$select=*,PolicyArea/Title&$expand=PolicyArea&$orderby=Title desc&$top=5000",
    method: "GET",
    headers: {
        "Accept": "application/json; odata=verbose"
    },
    success: function(data) {
        var primaryPolicies = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
        var rankedPolicies = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
        var selectedPolicies = [];

        // Assuming you have defined 'searchResult' elsewhere
        searchResult.then(async function(searched) {
            for (var i = 0; i < data.d.results.length; i++) {
                var flag = false;
                var divisions = data.d.results[i].Enterprise_Division_BU_Scope != null ? data.d.results[i].Enterprise_Division_BU_Scope.split(";") : [];
                var countries = data.d.results[i].Geographic_Scope || "NO_REGION";
                var policyArea = data.d.results[i].PolicyArea != null ? (data.d.results[i].PolicyArea.Title || "") : "";
                policyArea = policyArea.toLowerCase();
                var title = (data.d.results[i].Title || "").toLowerCase();

                if (searched.indexOf(lang == 'English' ? data.d.results[i].Id.toString() : data.d.results[i].Policy_ID.toString()) > -1) {
                    if (policyArea.indexOf(keyToSearch) > -1) {
                        // Rest of your code here...
                    } else {
                        // Rest of your code here...
                    }
                }
            }

            rankedPolicies.forEach(rank => {
                selectedPolicies = selectedPolicies.concat(rank);
            });

            // Rest of your code...

            $.each(rankingPolicies, function(i, element) {
                count += 1;
                var idValue = '';
                if (lang == 'English') {
                    idValue = element.Id;
                } else {
                    idValue = element.Policy_ID;
                }

                // Rest of your code...

                results.push(item);
                // Rest of your code...
            });

            // Rest of your code...

            $(".se-pre-con").css("display", "none");
        });
    },
    error: function(error) {
        // Handle error
    }
});

=============
  var listName = '';
        var filter = '';
        if (lang == 'English') {
            listName = 'Policies';
            filter = "Status ne 'Retired'";
        }
        else {
            listName = 'TranslatedPolicies';
            filter = "Status ne 'Retired' and Language eq '" + lang + "'";
        }
        _this.allPolicies = sp.web.lists.getByTitle(listName).items.filter(filter)
            .select("*,PolicyArea/Title")
            .expand("PolicyArea").orderBy('Title', true).top(5000).get();
        _this.allPolicies.then(function (data) {
            // data = data.sort((a, b) => (a.Title > b.Title) ? 1 : -1);  
            var primaryPolicies = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
            var rankedPolicies = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
            var selectedPolicies = [];
            //start- added by nimisha on 13-sept-2021- translation
            searchResult.then(async function (searched) {
                //await searched.map(String);
                //end- added by nimisha on 13-sept-2021- translation
                for (var i = 0; i < data.length; i++) {
                    var flag = false;
                    var divisions = data[i].Enterprise_Division_BU_Scope != null ? data[i].Enterprise_Division_BU_Scope.split(";") : [];
                    var countries = data[i].Geographic_Scope || "NO_REGION";
                    var policyArea = data[i].PolicyArea != null ? (data[i].PolicyArea.Title || "") : "";
                    policyArea = policyArea.toLowerCase();
                    var title = (data[i].Title || "").toLowerCase();
                    if (searched.indexOf(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString()) > -1) {
                        if (policyArea.indexOf(keyToSearch) > -1) {

                            if (divisions.indexOf(userDivision) > -1 && countries.indexOf(userCountry) > -1) {
                                if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[0].push(data[i]);
                                else
                                    rankedPolicies[1].push(data[i]);
                            }

                            else if (countries.indexOf(userCountry) > -1 && divisions.indexOf("Enterprise") > -1) {
                                if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[2].push(data[i]);
                                else
                                    rankedPolicies[3].push(data[i]);
                            }

                            else if (divisions.indexOf(userDivision) > -1 && countries.indexOf("Global") > -1) {
                                if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[4].push(data[i]);
                                else
                                    rankedPolicies[5].push(data[i]);
                            }

                            else {
                                if (divisions.indexOf("Enterprise") > -1 && countries.indexOf("Global") > -1 && title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[6].push(data[i]);
                                else if (divisions.indexOf("Enterprise") > -1 && countries.indexOf("Global") > -1)
                                    rankedPolicies[7].push(data[i]);
                                else if (divisions.some(item => userInterest.indexOf(item) > -1) && title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[8].push(data[i]);
                                else if (divisions.some(item => userInterest.indexOf(item) > -1))
                                    rankedPolicies[9].push(data[i]);
                                else if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[10].push(data[i]);
                                else
                                    rankedPolicies[11].push(data[i]);
                            }

                        }
                        else {
                            if (divisions.indexOf(userDivision) > -1 && countries.indexOf(userCountry) > -1) {
                                if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[12].push(data[i]);
                                else
                                    rankedPolicies[13].push(data[i]);
                            }

                            else if (countries.indexOf(userCountry) > -1 && divisions.indexOf("Enterprise") > -1) {
                                if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[14].push(data[i]);
                                else
                                    rankedPolicies[15].push(data[i]);
                            }

                            else if (divisions.indexOf(userDivision) > -1 && countries.indexOf("Global") > -1) {
                                if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[16].push(data[i]);
                                else
                                    rankedPolicies[17].push(data[i]);
                            }

                            else {
                                if (divisions.indexOf("Enterprise") > -1 && countries.indexOf("Global") > -1 && title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[18].push(data[i]);
                                else if (divisions.indexOf("Enterprise") > -1 && countries.indexOf("Global") > -1)
                                    rankedPolicies[19].push(data[i]);
                                else if (divisions.some(item => userInterest.indexOf(item) > -1) && title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[20].push(data[i]);
                                else if (divisions.some(item => userInterest.indexOf(item) > -1))
                                    rankedPolicies[21].push(data[i]);
                                else if (title.indexOf(keyToSearch) > -1)
                                    rankedPolicies[22].push(data[i]);
                                else
                                    rankedPolicies[23].push(data[i]);
                            }

                        }
                    }
                }

                rankedPolicies.forEach(rank => {
                    selectedPolicies = selectedPolicies.concat(rank);
                });
                var titleArrSpace = []; var titleArr = []; var overviewArr = []; var KeywordsArr = []; var otherArr = [];
                var pattern = new RegExp("(<=\\s|\\b)" + keyToSearch + "(?=[!@#$%^&*]|\\b|\\s|$)");
                selectedPolicies.forEach(item => {
                    var title = (item.Title || "").toLowerCase();
                    var polOverview = (item.Overview || "").toLowerCase();
                    var keywords = (item.Keywords || "").toLowerCase();

                    if (pattern.test(title))
                        titleArrSpace.push(item);
                    else if (title.indexOf(keyToSearch) > -1)
                        titleArr.push(item);
                    else if (polOverview.indexOf(keyToSearch) > -1)
                        overviewArr.push(item);
                    else if (keywords.indexOf(keyToSearch) > -1)
                        KeywordsArr.push(item);
                    else
                        otherArr.push(item);

                });
                //console.log(titleArr,overviewArr,KeywordsArr,otherArr);
                var rankingPolicies = [];
                rankingPolicies = titleArrSpace.concat(titleArr).concat(overviewArr).concat(KeywordsArr).concat(otherArr);
                //console.log(rankingPolicies);
                var results = [];
                for (var i = 0; i < rankingPolicies.length; i++) {
                    var element = rankingPolicies[i];
                    count += 1;
                    //  var link = window.location.href.split('#')[0] + "#/ViewPolicy?id=" + element.Id;
                    var idValue = '';
                    if (lang == 'English')
                        idValue = element.Id;
                    else
                        idValue = element.Policy_ID;
     if (element.External)
                        link = element.Policy_Link;

                    var title = /* lang == "English" ?  */element.Title /* : _this.state.translatedPName */;
                    var overview = /* lang == 'English' ?  */element.Overview != null ? element.Overview : "" /* : _this.state.translatedOverview != "" ? _this.state.translatedOverview : "" */;
                    var overviewAll = /* lang == 'English' ?  */element.Overview != null ? element.Overview : "" /* : _this.state.translatedOverview != "" ? _this.state.translatedOverview : "" */;



                    overview = overview.length > 180 ? overview.substring(0, 177) + "..." : overview;
                    //end- added by nimisha on 13-sept-2021- translation             

                    var scope = element.Geographic_Scope != null ? element.Geographic_Scope : "";
                    var scopeAll = scope.split(";").join(", ");
                    var division = element.Enterprise_Division_BU_Scope != null ? element.Enterprise_Division_BU_Scope : "";
                    var divisionAll = division.split(";").join(";");
                    var sponsoringAll = element.Policy_Sponsoring_Division != null ? element.Policy_Sponsoring_Division : "";
                    var policyNumber = element.Policy_Number != null ? element.Policy_Number : "";
                    var lastUpdated = "";
                    var lastUpdatedSort = "";
                    if (element.Last_Updated != null && element.Last_Updated != "") {
                        var d = element.Last_Updated.split('T')[0].split("-");
                        lastUpdated = d[1] + "/" + d[2] + "/" + d[0];
                        lastUpdatedSort = d.join("-");
                    }
                    var modified = element.Modified;
                    var policyContact = element.PolicyContact_Email || "";

                    var linkname = { "sc:linkname": 'search|policy|' + (element.Title || "") };
                    var attr = {
                        'sc:pf-data':
                        {
                            "pfAnalyticsAttrData": {
                                "pfContentLiked": {
                                    "contentTitle": element.Title || "",//Title of the liked content, could be same as Interaction Name                
                                    "contentType": "bookmark", // page, article, video, document, policy section, etc.                 
                                    "contentPlacement": "" // optional, could be tile, rail, banner, etc.                 
                                }
                            }
                        }
                    };
                    var item = {
                        Title: title,
                        Id: lang == 'English' ? element.Id : element.Policy_ID,
                        Overview: overview,
                        OverviewAll: overviewAll,
                        PolicyNumber: policyNumber,
                        ScopeAll: scopeAll,
                        DivisionAll: divisionAll,
                        SponsoringDivisions: sponsoringAll,
                        PolicyType: element.Policy_Type || "",
                        PolicySubSection: element.PolicySubSectionId || 0,
                        Link: link,
                        LastUpdated: lastUpdated,
                        LastUpdatedSort: lastUpdatedSort,
                        Modified: modified,
                        Bookmarked: _this.objBookmark.userBookmarkedPolicies.indexOf(lang == 'English' ? element.Id.toString() : element.Policy_ID.toString()) > -1,
                        Subscribed: _this.objSupscription.userSubscriptionPolicies.indexOf(lang == 'English' ? element.Id.toString() : element.Policy_ID.toString()) > -1,
                        External: element.External,
                        New: ((element.IsMajorUpdate == "Yes" || element.External == true) && element.Modified >= dateToSearch),
                        LinkName: linkname,
                        Attr: attr,
                        PolicyContact: policyContact
                    };
                    results.push(item);
                    _this.highlightText($("#searchBox").val());
                }
                _this.setState({
                    ..._this.state,
                    policies: results,
                    policiesData: results,
                    searched: true,
                    //languageChanged: false
                }, () => _this.highlightText(queryString));
                _this.highlightText($("#searchBox").val())
                _this.addSearchKeyword(results.length);
                window["searchResultsTrack"](_this.keyword, count);
                $(".se-pre-con").css("display", "none");
            });


        });
====
function loadTraining(keyword, lang) {
    var listName = '';
    var filter = '';
    if (lang == 'English')
        listName = 'Training';
    else {
        listName = 'TranslatedTraining';
        filter = "Language eq '" + lang + "'";
    }
    var trainingData = [];
    var policiesMatching = [];

    return $.ajax({
        url: "https://your-sharepoint-site.com/_api/web/lists/getByTitle('" + listName + "')/items",
        method: 'GET',
        headers: {
            'Accept': 'application/json;odata=nometadata'
        },
        data: {
            '$filter': filter,
            '$orderby': 'Training_Name asc'
        }
    }).then(function (data) {
        trainingData = data.value.filter(function (d) {
            if (d.Training_Name != null) {
                return d.Training_Name.trim().toLowerCase().indexOf(keyword) >= 0;
            }
        });
        if (trainingData.length > 0) {
            trainingData.forEach(function (e) {
                policiesMatching.push(e.Policy_ID.toString());
            });
        }
        console.log("Training Matching:" + policiesMatching);
        return policiesMatching;
    }).catch(function (err) {
        alert("Something went wrong. Please try after some time");
        return []; // Return an empty array or handle the error as needed
    });
}
function loadSupportingResources(keyword, lang) {
    var listName = '';
    var filter = '';
    if (lang == 'English')
        listName = 'SupportingResources';
    else {
        listName = 'TranslatedSupportingResources';
        filter = "Language eq '" + lang + "'";
    }
    var srData = [];
    var policiesMatching = [];

    return $.ajax({
        url: "https://your-sharepoint-site.com/_api/web/lists/getByTitle('" + listName + "')/items",
        method: 'GET',
        headers: {
            'Accept': 'application/json;odata=nometadata'
        },
        data: {
            '$filter': filter,
            '$orderby': 'Title asc'
        }
    }).then(function (data) {
        srData = data.value.filter(function (d) {
            if (d.Title != null) {
                return d.Title.trim().toLowerCase().indexOf(keyword) >= 0;
            }
        });
        if (srData.length > 0) {
            srData.forEach(function (e) {
                policiesMatching.push(e.Policy_ID.toString());
            });
        }
        console.log("SupportingResources Matching:" + policiesMatching);
        return policiesMatching;
    }).catch(function (err) {
        alert("Something went wrong. Please try after some time");
        return []; // Return an empty array or handle the error as needed
    });
}
function loadAcronyms(keyword) {
    var srData = [];
    var policiesMatching = [];

    return $.ajax({
        url: "https://your-sharepoint-site.com/_api/web/lists/getByTitle('Acronyms')/items",
        method: 'GET',
        headers: {
            'Accept': 'application/json;odata=nometadata'
        }
    }).then(function (data) {
        srData = data.value.filter(function (d) {
            return ((d.Acronym || "").toLowerCase().indexOf(keyword) >= 0 || (d.Definition || "").toLowerCase().indexOf(keyword) > -1);
        });
        if (srData.length > 0) {
            srData.forEach(function (e) {
                policiesMatching.push(e.Policy_ID.toString());
            });
        }
        console.log("SupportingResources Matching:" + policiesMatching);
        return policiesMatching;
    }).catch(function (err) {
        alert("Something went wrong. Please try after some time");
        return []; // Return an empty array or handle the error as needed
    });
}
function loadSOP(keyword, lang) {
    var listName = '';
    var filter = '';
    if (lang == 'English')
        listName = 'SOP';
    else {
        listName = 'TranslatedSOP';
        filter = "Language eq '" + lang + "'";
    }
    var sopData = [];
    var policiesMatching = [];

    return $.ajax({
        url: "https://your-sharepoint-site.com/_api/web/lists/getByTitle('" + listName + "')/items",
        method: 'GET',
        headers: {
            'Accept': 'application/json;odata=nometadata'
        },
        data: {
            '$filter': filter,
            '$orderby': 'Title asc'
        }
    }).then(function (data) {
        sopData = data.value.filter(function (d) {
            if (d.Title != null) {
                return d.Title.trim().toLowerCase().indexOf(keyword) >= 0;
            }
        });
        if (sopData.length > 0) {
            sopData.forEach(function (e) {
                policiesMatching.push(e.Policy_ID.toString());
            });
        }
        console.log("SOPs Matching:" + policiesMatching);
        return policiesMatching;
    }).catch(function (err) {
        alert("Something went wrong. Please try after some time");
        return []; // Return an empty array or handle the error as needed
    });
}
function loadRecommended(keyword, lang) {
    var listName = '';
    var filter = '';
    if (lang == 'English')
        listName = 'Recommended';
    else {
        listName = 'TranslatedRecommended';
        filter = "Language eq '" + lang + "'";
    }
    var recomData = [];
    var policiesMatching = [];

    return $.ajax({
        url: "https://your-sharepoint-site.com/_api/web/lists/getByTitle('" + listName + "')/items",
        method: 'GET',
        headers: {
            'Accept': 'application/json;odata=nometadata'
        },
        data: {
            '$filter': filter,
            '$orderby': 'Document_Name asc'
        }
    }).then(function (data) {
        recomData = data.value.filter(function (d) {
            if (d.Document_Name != null) {
                return d.Document_Name.trim().toLowerCase().indexOf(keyword) >= 0;
            }
        });
        if (recomData.length > 0) {
            recomData.forEach(function (e) {
                policiesMatching.push(e.Policy_ID.toString());
            });
        }
        console.log("Recommended Matching:" + policiesMatching);
        return policiesMatching;
    }).catch(function (err) {
        alert("Something went wrong. Please try after some time");
        return []; // Return an empty array or handle the error as needed
    });
}
function loadSystems(keyword, lang) {
    var listName = '';
    var filter = '';
    if (lang == 'English')
        listName = 'Systems';
    else {
        listName = 'TranslatedSystems';
        filter = "Language eq '" + lang + "'";
    }
    var systemsData = [];
    var policiesMatching = [];

    return $.ajax({
        url: "https://your-sharepoint-site.com/_api/web/lists/getByTitle('" + listName + "')/items",
        method: 'GET',
        headers: {
            'Accept': 'application/json;odata=nometadata'
        },
        data: {
            '$filter': filter,
            '$orderby': 'Systems_Name asc'
        }
    }).then(function (data) {
        systemsData = data.value.filter(function (d) {
            if (d.Systems_Name != null) {
                return d.Systems_Name.trim().toLowerCase().indexOf(keyword) >= 0;
            }
        });
        if (systemsData.length > 0) {
            systemsData.forEach(function (e) {
                policiesMatching.push(e.Policy_ID.toString());
            });
        }
        console.log("Systems matching:" + policiesMatching);
        return policiesMatching;
    }).catch(function (err) {
        alert("Something went wrong. Please try after some time");
        return []; // Return an empty array or handle the error as needed
    });
}

=========================

public async loadTraining(keyword, lang) {
        var listName = '';
      var filter = '';
      if(lang == 'English')
        listName = 'Training';
      else{
        listName = 'TranslatedTraining';
        filter = "Language eq '"+lang+"'";
      }
        var trainingData = [];
        var policiesMatching = [];
        await sp.web.lists.getByTitle(listName).items.filter(filter).orderBy("Training_Name", true).getAll().then(async (data) => {
            trainingData = data.filter(d => {
                if (d.Training_Name != null) {
                    return d.Training_Name.trim().toLowerCase().indexOf(keyword) >= 0;
                }
            });
            if (trainingData.length > 0) {
                trainingData.forEach(e => {
                    policiesMatching.push(e.Policy_ID.toString());
                });
            }
        }).catch((err) => {
            alert("Something went wrong. Please try after sometime");
        });
        console.log("Training Matching:" + policiesMatching);
        return policiesMatching;

    }

    public async loadSupportingResources(keyword, lang) {
        var listName = '';
      var filter = '';
      if(lang == 'English')
        listName = 'SupportingResources';
      else{
        listName = 'TranslatedSupportingResources';
        filter = "Language eq '"+lang+"'";
      }
        var srData = [];
        var policiesMatching = [];
        await sp.web.lists.getByTitle(listName).items.filter(filter).orderBy("Title", true).getAll().then(async (data) => {
            srData = data.filter(d => {
                if (d.Title != null) {
                    return d.Title.trim().toLowerCase().indexOf(keyword) >= 0;
                }
            });
            if (srData.length > 0) {
                srData.forEach(e => {
                    policiesMatching.push(e.Policy_ID.toString());
                });
            }
        }).catch((err) => {
            alert("Something went wrong. Please try after sometime");
        });
        console.log("SupportingResources Matching:" + policiesMatching);
        return policiesMatching;

    }

    public async loadAcronyms(keyword, lang) {
       var srData = [];
        var policiesMatching = [];
        await sp.web.lists.getByTitle('Acronyms').items.getAll().then(async (data) => {
            srData = data.filter(d => {
                    return ((d.Acronym || "").toLowerCase().indexOf(keyword) >= 0 || (d.Definition || "").toLowerCase().indexOf(keyword) > -1);
            });
            if (srData.length > 0) {
                srData.forEach(e => {
                    policiesMatching.push(e.Policy_ID.toString());
                });
            }
        }).catch((err) => {
            alert("Something went wrong. Please try after sometime");
        });
        console.log("SupportingResources Matching:" + policiesMatching);
        return policiesMatching;

    }

    public async loadSOP(keyword, lang) {
        var listName = '';
      var filter = '';
      if(lang == 'English')
        listName = 'SOP';
      else{
        listName = 'TranslatedSOP';
        filter = "Language eq '"+lang+"'";
      }
        var sopData = [];
        var policiesMatching = [];
        await sp.web.lists.getByTitle(listName).items.filter(filter).orderBy("Title", true).getAll().then(async (data) => {
            sopData = data.filter(d => {
                if (d.Title != null) {
                    return d.Title.trim().toLowerCase().indexOf(keyword) >= 0;
                }
            });
            if (sopData.length > 0) {
                sopData.forEach(e => {
                    policiesMatching.push(e.Policy_ID.toString());
                });
            }
        }).catch((err) => {
            alert("Something went wrong. Please try after sometime");
        });
        console.log("SOPs Matching:" + policiesMatching);
        return policiesMatching;

    }

    public async loadRecommended(keyword, lang) {
        var listName = '';
      var filter = '';
      if(lang == 'English')
        listName = 'Recommended';
      else{
        listName = 'TranslatedRecommended';
        filter = "Language eq '"+lang+"'";
      }
        var recomData = [];
        var policiesMatching = [];
        await sp.web.lists.getByTitle(listName).items.filter(filter).orderBy("Document_Name", true).getAll().then(async (data) => {
            recomData = data.filter(d => {
                if (d.Document_Name != null) {
                    return d.Document_Name.trim().toLowerCase().indexOf(keyword) >= 0;
                }
            });
            if (recomData.length > 0) {
                recomData.forEach(e => {
                    policiesMatching.push(e.Policy_ID.toString());
                });
            }
        }).catch((err) => {
            alert("Something went wrong. Please try after sometime");
        });
        console.log("Recommended Matching:" + policiesMatching);
        return policiesMatching;

    }

====
public async loadSearchResults(keyword, lang)
    {
        var _this = this;
      var searchedIds = [];
      var listName = '';
      var filter = '';
      if(lang == 'English')
        listName = 'Policies';
      else{
        listName = 'TranslatedPolicies';
        filter = "Language eq '"+lang+"'";
      }
      searchedIds = searchedIds.concat(await _this.loadSystems(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadTraining(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadSOP(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadSupportingResources(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadRecommended(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadAcronyms(keyword, lang));
      return new Promise<any>((resolve, reject) =>
      {
        sp.web.lists.getByTitle(listName).items.top(5000).filter(filter).select("*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection").expand("Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection").get().then(data => {
            for(var i = 1 ; i < data.length ; i++)
            {
                var policyArea = data[i].PolicyArea != null ? (data[i].PolicyArea.Title || "") : "";
                policyArea = policyArea.toLowerCase();;
                var title = (data[i].Title || "").toLowerCase();
                var polOverview = (data[i].Overview || "").toLowerCase();
                var keywords = (data[i].Keywords || "").toLowerCase();
                var riskAreas = (data[i].Risk_Domain || "").toLowerCase();
                var policyType = (data[i].Policy_Type || "").toLowerCase();
                var policySection = data[i].PolicySubSection != null ? (data[i].PolicySubSection.Policy_SubSection || "") : "";
                policySection = policySection.toLowerCase();
                var polNumber = (data[i].Policy_Number || "").toLowerCase();
                var guiding = (data[i].Guiding_Principles || "").toLowerCase();
                var country = (data[i].Geographic_Scope || "").toLowerCase();
                var div = (data[i].Enterprise_Division_BU_Scope || "").toLowerCase();
                var sponsoring = (data[i].Policy_Sponsoring_Division || "").toLowerCase();
                var reviewer = (data[i].Divisional_Reviewer || "").toLowerCase();
                var contact = (data[i].PolicyContact_Email || "").toLowerCase();
                var owner = data[i].Policy_Owner;
                var ownerString = "";
                var delegate = data[i].Policy_Delegate;
                var delegateString = "";
                if(owner != null)
                {
                    owner.forEach(element => {
                        ownerString += element.Title + ";";
                    });
                }
                if(delegate != null)
                {
                    delegate.forEach(element => {
                        delegateString += element.Title + ";";
                    });
                }
                if(title.indexOf(keyword) > -1 ||  polOverview.indexOf(keyword) > -1 || keywords.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (policyArea.indexOf(keyword) > -1 || riskAreas.indexOf(keyword) > -1 ||  policyType.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (policySection.indexOf(keyword) > -1 || polNumber.indexOf(keyword) > -1 ||  guiding.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (country.indexOf(keyword) > -1 || div.indexOf(keyword) > -1 ||  sponsoring.indexOf(keyword) > -1 || contact.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (ownerString.toLowerCase().indexOf(keyword) > -1 || delegateString.toLowerCase().indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (reviewer.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
            }
            resolve(searchedIds);
        });
     });
    }
    
    public async loadSystems(keyword, lang) {
        var listName = '';
      var filter = '';
      if(lang == 'English')
        listName = 'Systems';
      else{
        listName = 'TranslatedSystems';
        filter = "Language eq '"+lang+"'";
      }
        var systemsData = [];
        var policiesMatching = [];
    
        await sp.web.lists.getByTitle(listName).items.filter(filter).orderBy("Systems_Name", true).getAll().then(async (data)  => {
            systemsData = data.filter(d => {
                if (d.Systems_Name != null) {
                    return d.Systems_Name.trim().toLowerCase().indexOf(keyword) >= 0;
                }
            });
            if (systemsData.length > 0) {
                systemsData.forEach(e => {
                    policiesMatching.push(e.Policy_ID.toString());
                });
            }
        }).catch((err) => {
            alert("Something went wrong. Please try after sometime");
        });
        console.log("Systems matching:" + policiesMatching);
        return policiesMatching;
    }
=====
function loadSearchResults(keyword, lang) {
    var searchedIds = [];
    var listName = '';
    var filter = '';
    
    if (lang == 'English')
        listName = 'Policies';
    else {
        listName = 'TranslatedPolicies';
        filter = "Language eq '" + lang + "'";
    }

    // Assuming your SharePoint site URL is 'https://your-sharepoint-site.com'
    var apiUrl = "https://your-sharepoint-site.com/_api/web/lists/getByTitle('" + listName + "')/items?$top=5000&$filter=" + filter + "&$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection";

    $.ajax({
        url: apiUrl,
        method: 'GET',
        headers: {
            'Accept': 'application/json;odata=nometadata'
        },
        success: function (data) {
            for (var i = 1; i < data.value.length; i++) {
                var policyArea = data.value[i].PolicyArea != null ? (data.value[i].PolicyArea.Title || "") : "";
                policyArea = policyArea.toLowerCase();
                var title = (data.value[i].Title || "").toLowerCase();
                var polOverview = (data.value[i].Overview || "").toLowerCase();
                var keywords = (data.value[i].Keywords || "").toLowerCase();
                var riskAreas = (data.value[i].Risk_Domain || "").toLowerCase();
                var policyType = (data.value[i].Policy_Type || "").toLowerCase();
                var policySection = data.value[i].PolicySubSection != null ? (data.value[i].PolicySubSection.Policy_SubSection || "") : "";
                policySection = policySection.toLowerCase();
                var polNumber = (data.value[i].Policy_Number || "").toLowerCase();
                var guiding = (data.value[i].Guiding_Principles || "").toLowerCase();
                var country = (data.value[i].Geographic_Scope || "").toLowerCase();
                var div = (data.value[i].Enterprise_Division_BU_Scope || "").toLowerCase();
                var sponsoring = (data.value[i].Policy_Sponsoring_Division || "").toLowerCase();
                var reviewer = (data.value[i].Divisional_Reviewer || "").toLowerCase();
                var contact = (data.value[i].PolicyContact_Email || "").toLowerCase();
                var owner = data.value[i].Policy_Owner;
                var ownerString = "";
                var delegate = data.value[i].Policy_Delegate;
                var delegateString = "";

                if (owner != null) {
                    owner.forEach(function (element) {
                        ownerString += element.Title + ";";
                    });
                }
                if (delegate != null) {
                    delegate.forEach(function (element) {
                        delegateString += element.Title + ";";
                    });
                }
                if (title.indexOf(keyword) > -1 || polOverview.indexOf(keyword) > -1 || keywords.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data.value[i].Id.toString() : data.value[i].Policy_ID.toString());
                else if (policyArea.indexOf(keyword) > -1 || riskAreas.indexOf(keyword) > -1 || policyType.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data.value[i].Id.toString() : data.value[i].Policy_ID.toString());
                else if (policySection.indexOf(keyword) > -1 || polNumber.indexOf(keyword) > -1 || guiding.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data.value[i].Id.toString() : data.value[i].Policy_ID.toString());
                else if (country.indexOf(keyword) > -1 || div.indexOf(keyword) > -1 || sponsoring.indexOf(keyword) > -1 || contact.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data.value[i].Id.toString() : data.value[i].Policy_ID.toString());
                else if (ownerString.toLowerCase().indexOf(keyword) > -1 || delegateString.toLowerCase().indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data.value[i].Id.toString() : data.value[i].Policy_ID.toString());
                else if (reviewer.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data.value[i].Id.toString() : data.value[i].Policy_ID.toString());
            }
            resolve(searchedIds);
        },
        error: function (error) {
            console.log(error);
        }
    });
}

===============
public async loadSearchResults(keyword, lang)
    {
        var _this = this;
      var searchedIds = [];
      var listName = '';
      var filter = '';
      if(lang == 'English')
        listName = 'Policies';
      else{
        listName = 'TranslatedPolicies';
        filter = "Language eq '"+lang+"'";
      }
      searchedIds = searchedIds.concat(await _this.loadSystems(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadTraining(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadSOP(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadSupportingResources(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadRecommended(keyword, lang));
      searchedIds = searchedIds.concat(await _this.loadAcronyms(keyword, lang));
      return new Promise<any>((resolve, reject) =>
      {
        sp.web.lists.getByTitle(listName).items.top(5000).filter(filter).select("*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection").expand("Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection").get().then(data => {
            for(var i = 1 ; i < data.length ; i++)
            {
                var policyArea = data[i].PolicyArea != null ? (data[i].PolicyArea.Title || "") : "";
                policyArea = policyArea.toLowerCase();;
                var title = (data[i].Title || "").toLowerCase();
                var polOverview = (data[i].Overview || "").toLowerCase();
                var keywords = (data[i].Keywords || "").toLowerCase();
                var riskAreas = (data[i].Risk_Domain || "").toLowerCase();
                var policyType = (data[i].Policy_Type || "").toLowerCase();
                var policySection = data[i].PolicySubSection != null ? (data[i].PolicySubSection.Policy_SubSection || "") : "";
                policySection = policySection.toLowerCase();
                var polNumber = (data[i].Policy_Number || "").toLowerCase();
                var guiding = (data[i].Guiding_Principles || "").toLowerCase();
                var country = (data[i].Geographic_Scope || "").toLowerCase();
                var div = (data[i].Enterprise_Division_BU_Scope || "").toLowerCase();
                var sponsoring = (data[i].Policy_Sponsoring_Division || "").toLowerCase();
                var reviewer = (data[i].Divisional_Reviewer || "").toLowerCase();
                var contact = (data[i].PolicyContact_Email || "").toLowerCase();
                var owner = data[i].Policy_Owner;
                var ownerString = "";
                var delegate = data[i].Policy_Delegate;
                var delegateString = "";
                if(owner != null)
                {
                    owner.forEach(element => {
                        ownerString += element.Title + ";";
                    });
                }
                if(delegate != null)
                {
                    delegate.forEach(element => {
                        delegateString += element.Title + ";";
                    });
                }
                if(title.indexOf(keyword) > -1 ||  polOverview.indexOf(keyword) > -1 || keywords.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (policyArea.indexOf(keyword) > -1 || riskAreas.indexOf(keyword) > -1 ||  policyType.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (policySection.indexOf(keyword) > -1 || polNumber.indexOf(keyword) > -1 ||  guiding.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (country.indexOf(keyword) > -1 || div.indexOf(keyword) > -1 ||  sponsoring.indexOf(keyword) > -1 || contact.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (ownerString.toLowerCase().indexOf(keyword) > -1 || delegateString.toLowerCase().indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
                else if (reviewer.indexOf(keyword) > -1)
                    searchedIds.push(lang == 'English' ? data[i].Id.toString() : data[i].Policy_ID.toString());
            }
            resolve(searchedIds);
        });
     });
    }
============
var siteUrl = "https://your-sharepoint-site-url";
var listName = "YourListName";
var idsToFilter = [1, 2, 3, ...]; // Replace with your IDs

function retrieveItemsByIds(ids) {
    var endpointUrl = siteUrl + "/_api/web/lists/getbytitle('" + listName + "')/items";
    endpointUrl += "?$filter=ID eq " + ids.join(' or ID eq ');

    $.ajax({
        url: endpointUrl,
        method: "GET",
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            // Process the filtered items here
        },
        error: function (error) {
            console.log("Error: " + JSON.stringify(error));
        }
    });
}

// Split the IDs into batches of 5000 or less and retrieve items
var batchSize = 5000;
for (var i = 0; i < idsToFilter.length; i += batchSize) {
    var batchIds = idsToFilter.slice(i, i + batchSize);
    retrieveItemsByIds(batchIds);
}
======

function filterSharePointItems() {
    var siteUrl = "https://your-sharepoint-site-url";
    var listName = "YourListName";
    var batchSize = 100; // Number of items to retrieve in each batch
    var skipCount = 0;   // Initial value for skipping items

    function retrieveItems() {
        var endpointUrl = siteUrl + "/_api/web/lists/getbytitle('" + listName + "')/items";
        
        // Use $top and $skip to retrieve items in batches
        endpointUrl += "?$top=" + batchSize + "&$skip=" + skipCount;

        $.ajax({
            url: endpointUrl,
            method: "GET",
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                // Process the retrieved items here
                
                // Check if there are more items to retrieve
                if (data.d && data.d.results.length > 0) {
                    skipCount += batchSize;
                    retrieveItems(); // Fetch the next batch
                }
            },
            error: function (error) {
                console.log("Error: " + JSON.stringify(error));
            }
        });
    }

    // Start retrieving items
    retrieveItems();
}

// Call the function to filter SharePoint items
filterSharePointItems();

≈========
var policyIds=[924, 406, 406, 406, 406, 406, 406, 989, 84, 71, 71]

enterpricedata.forEach(function(item) {
                                             if ( policyIds.includes(item.Policy_ID)) {
                                               filteredItems.push(item);
                                             }
                                           });
===========
import React, { Component } from 'react';
import $ from 'jquery'; // Import jQuery (if not already done)
import { sp } from '@pnp/sp/presets/all'; // Import PnP JS Library for SharePoint

class MyComponent extends Component {
  componentDidMount() {
    this.fetchData();
    this.addEventListeners();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.userLanguage !== this.props.userLanguage) {
      this.fetchData();
    }
  }

  fetchData() {
    $(".se-pre-con").css("display", "block");
    const locfilter = `Language/Title eq '${this.props.userLanguage}'`;

    sp.web.lists.getByTitle('Policies').items
      .select('*,Language/Title')
      .expand('Language')
      .filter(locfilter)
      .getAll()
      .then(data => {
        if (data != null) {
          this.allPolicies = data;
          if (this.keyword != null && this.keyword !== "") {
            this.displaySearchedPolicies();
          }
          // Update UI or state with new data
        }
      });
  }

  addEventListeners() {
    // Logic to add event listeners
  }

  render() {
    return <div>Content goes here</div>;
  }
}

export default MyComponent;


========

 public componentDidMount(): void {
      
     $(".se-pre-con").css("display", "block");
      this.getenterpricelistdata(this.props.userLanguage);
   
       // this.getenterpriceSearchedPolicies();
        //this.getSOPdata();

        var _this = this;
        var locfilter = '';
        if (_this.keyword != null)
        {
          
            $("#searchBox").val(_this.keyword);
        }
        
        _this.loadSection(this.props.userLanguage);
        locfilter = `Language/Title eq '${this.props.userLanguage}'`;
     sp.web.lists.getByTitle('Policies').items.select('*,Language/Title').expand('Language').filter(locfilter).getAll().then(data =>{
            if(data != null)
            {
                _this.allPolicies = data;
                if(_this.keyword != null && _this.keyword != "")
                    _this.displaySearchedPolicies();

            }
        });
        _this.AddEventListeners();

    }
    ======================
 var listName = '';
      var filter = '';
      if(language == 'English')
        listName = 'Policies';
      else{
        listName = 'TranslatedPolicies';
        filter = "Language eq '"+language+"'";
      }
     
                
       var policyIds;
        const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-UAT/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";=========================
=================================      
const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-UAT/_api/web/lists/getbytitle($listName)/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000======================
res.PolicySubSection && res.PolicySubSection.Policy_SubSection.toLowerCase().includes(this.keyword.toLowerCase());
==================
const dataArray = [
  {Policy_Owner: Array(2), PolicyArea: {...}, Policy_Delegate: Array(1), FileSystemObjectType: 0, Id: 71, ...},
  {Policy_Owner: Array(2), PolicyArea: {...}, FileSystemObjectType: 0, Id: 406, ServerRedirectedEmbedUri: null, ...},
  {PolicyArea: {...}, FileSystemObjectType: 0, Id: 776, ServerRedirectedEmbedUri: null, ServerRedirectedEmbedUrl: '', ...},
  {Policy_Owner: Array(2), PolicyArea: {...}, Policy_Delegate: Array(1), FileSystemObjectType: 0, Id: 71, ...},
  {Policy_Owner: Array(2), PolicyArea: {...}, FileSystemObjectType: 0, Id: 406, ServerRedirectedEmbedUri: null, ...},
  {Policy_Owner: Array(1), PolicyArea: {...}, FileSystemObjectType: 0, Id: 924, ServerRedirectedEmbedUri: null, ...}
];

const uniqueDataArray = dataArray.filter((item, index, self) =>
  index === self.findIndex((t) => t.Id === item.Id)
);

console.log(uniqueDataArray);


Array(6)
0
: 
{Policy_Owner: Array(2), PolicyArea: {…}, Policy_Delegate: Array(1), FileSystemObjectType: 0, Id: 71, …}
1
: 
{Policy_Owner: Array(2), PolicyArea: {…}, FileSystemObjectType: 0, Id: 406, ServerRedirectedEmbedUri: null, …}
2
: 
{PolicyArea: {…}, FileSystemObjectType: 0, Id: 776, ServerRedirectedEmbedUri: null, ServerRedirectedEmbedUrl: '', …}
3
: 
{Policy_Owner: Array(2), PolicyArea: {…}, Policy_Delegate: Array(1), FileSystemObjectType: 0, Id: 71, …}
4
: 
{Policy_Owner: Array(2), PolicyArea: {…}, FileSystemObjectType: 0, Id: 406, ServerRedirectedEmbedUri: null, …}
5
: 
{Policy_Owner: Array(1), PolicyArea: {…}, FileSystemObjectType: 0, Id: 924, ServerRedirectedEmbedUri: null, …}
================
import { Version } from '@microsoft/sp-core-library';
import { BaseClientSideWebPart, IPropertyPaneConfiguration } from '@microsoft/sp-webpart-base';
import { escape } from '@microsoft/sp-lodash-subset';

import styles from './RemoveDuplicateIdsWebPart.module.scss';
import * as strings from 'RemoveDuplicateIdsWebPartStrings';
import { sp } from '@pnp/sp/presets/all';

export interface IRemoveDuplicateIdsWebPartProps {
  description: string;
}

export default class RemoveDuplicateIdsWebPart extends BaseClientSideWebPart<IRemoveDuplicateIdsWebPartProps> {

  public render(): void {
    this.domElement.innerHTML = `
      <div class="${styles.removeDuplicateIds}">
        <div class="${styles.container}">
          <div class="${styles.row}">
            <div class="${styles.column}">
              <span class="${styles.title}">Remove Duplicate IDs</span>
              <p class="${styles.subTitle}">Processing the SharePoint list data...</p>
            </div>
          </div>
        </div>
      </div>`;
    this.processSharePointListData();
  }

  private async processSharePointListData(): Promise<void> {
    try {
      // Initialize PnPjs with the current context
      sp.setup({
        spfxContext: this.context
      });

      // Fetch data from the SharePoint list
      const listName = 'YourListName';
      const listItems = await sp.web.lists.getByTitle(listName).items.select('Id').get();

      // Process the data to remove duplicate IDs
      const uniqueIds: number[] = [];
      const duplicateIds: number[] = [];

      listItems.forEach(item => {
        if (uniqueIds.includes(item.Id)) {
          duplicateIds.push(item.Id);
        } else {
          uniqueIds.push(item.Id);
        }
      });

      // Update the SharePoint list with the updated IDs (optional)
      // Uncomment the following lines to update the list with the unique IDs
      // duplicateIds.forEach(async id => {
      //   const item = await sp.web.lists.getByTitle(listName).items.getById(id).get();
      //   await sp.web.lists.getByTitle(listName).items.getById(id).update({ Id: item.Id + '-updated' });
      // });

      // Display the result to the user
      const resultMessage = `Found ${duplicateIds.length} duplicate IDs: ${duplicateIds.join(', ')}`;
      this.domElement.querySelector(`.${styles.subTitle}`).textContent = resultMessage;
    } catch (error) {
      console.log('Error occurred:', error);
      this.domElement.querySelector(`.${styles.subTitle}`).textContent = 'Error occurred while processing the data.';
    }
  }

  protected get dataVersion(): Version {
    return Version.parse('1.0');
  }

  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {
    return {
      pages: [
        {
          header: {
            description: strings.PropertyPaneDescription
          },
          groups: [
            {
              groupName: strings.BasicGroupName,
              groupFields: [
                PropertyPaneTextField('description', {
                  label: strings.DescriptionFieldLabel
                })
              ]
            }
          ]
        }
      ]
    };
  }
}


interface ListItem {
  ID: number;
  Title: string;
  Description: string;
}

function removeDuplicateIDs(list: ListItem[]): ListItem[] {
  const uniqueIDs: { [key: number]: boolean } = {};

  return list.filter(item => {
    if (uniqueIDs[item.ID]) {
      // Duplicate ID found, filter it out
      return false;
    } else {
      // Add ID to the uniqueIDs object
      uniqueIDs[item.ID] = true;
      return true;
    }
  });
}

// Usage example
const sharepointList: ListItem[] = [
  { ID: 1, Title: "Item 1", Description: "Description 1" },
  { ID: 2, Title: "Item 2", Description: "Description 2" },
  { ID: 1, Title: "Duplicate Item", Description: "Duplicate Description" },
  { ID: 3, Title: "Item 3", Description: "Description 3" },
];

const deduplicatedList = removeDuplicateIDs(sharepointList);
console.log(deduplicatedList);

// SharePoint list IDs array with duplicates
var sharePointListArray = [2, 4, 6, 8, 4, 8, 10, 12];

// Create a Set object to remove duplicates
var uniqueListIDs = new Set(sharePointListArray);

// Convert the Set object back to an array
var trimmedArray = Array.from(uniqueListIDs);

console.log(trimmedArray);

// Array of values to filter
var arrayToFilter = [2, 4, 6, 8];

// SharePoint list URL
var listUrl = "/_api/web/lists/getbytitle('YourListTitle')/items";

// Make a GET request to fetch all list items
$.ajax({
  url: listUrl,
  method: "GET",
  headers: {
    "Accept": "application/json; odata=verbose",
  },
  success: function(data) {
    // Array to store filtered items
    var filteredItems = [];

    // Iterate through the results to filter the items
    data.d.results.forEach(function(item) {
      if (arrayToFilter.includes(item.Id)) {
        filteredItems.push(item);
      }
    });

    // Process the filtered items as needed
    console.log(filteredItems);
  },
  error: function(error) {
    console.log("Error fetching SharePoint list items: " + JSON.stringify(error));
  }
});

≈=≈=====

import * as React from 'react';
import { PolicySearchOM } from './PolicySearchOM';
import { IPolicySearchProps } from './IPolicySearchProps';
import * as $ from 'jquery';
require('bootstrap/dist/js/bootstrap.min.js');
require('bootstrap/dist/css/bootstrap.min.css');
import '../Style/Common.css';
import NavigationBar from '../NavigationBar/NavigationBar';
import { FontWeights } from 'office-ui-fabric-react/lib/Styling';
import styless from './PolicySearch.module.scss';

import { Form, FormControl, Nav, Row } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSearch, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';
import styles from '../../../../fontstyles/fontstyles.scss';
import Redirect_Page from '../CustomAlert/Redirect_Page';

import pnp, { sp, Item, ItemAddResult, ItemUpdateResult, Web } from 'sp-pnp-js';
import { SearchQuery, SearchResults, SortDirection } from "sp-pnp-js";
import { selectProperties } from 'office-ui-fabric-react/lib/Utilities';
import * as jQuery from 'jquery';

export default class PolicySearch extends React.Component<IPolicySearchProps, {}>{

    private objPolicySearch = new PolicySearchOM();
    private allPolicies;
    private siteUrl = "";
    public keyword;
    public setRow = 0;   
    public count = 500;
    public  combinedData=[];
    public allListData=[];
    public systemListData=[];
    public  allpolicyids=[];
    public alldata=[];

    constructor(public props: IPolicySearchProps, public state: any) {
        super(props);
        this.state = {
            searched : false,
            sectionTitle : '',
            helpModalShow: false,
            policies :[],
            policiesData : [],
            count : 99,
            nonHostedModalShow : false,
            searchPlace : "",
            policyNote : "",
            redirectModalShow : false,
            redirectLink : "",
            noResultsText: "",
            localMarketCount : 99,
            enterpriseMarketCount: 99,
            searchCategory: "all",

            noResultsLocalMarket: "",
            noResultsEnterpriseMarket: "",
            allResults: "",
            localMarket: "",
            enterprise: "",
            enterpriseMarketResults: "",
            localMarketResults: "",
            showMoreText: "",
            addFiltersText: "",
            policyId:"",
            lastUpdated:"",
            enterpriseSearchResults: [], 
            localmarketid:"N/A"   
      
 
        }
        

        this.showMore = this.showMore.bind(this);
        this.loadSection = this.loadSection.bind(this);
        this.siteUrl = this.props.context.WebFullUrl;
        this.redirectPolicyPage = this.redirectPolicyPage.bind(this);
        this.redirectModalClose = this.redirectModalClose.bind(this);
        this.redirectLink = this.redirectLink.bind(this);
        this.showMoreResultsLocalMarket = this.showMoreResultsLocalMarket.bind(this);

    this.showMoreResultsEnterprise = this.showMoreResultsEnterprise.bind(this);

        this.keyword = this.getParameter("q", window.location.href);
        if(this.keyword != null)      
            this.keyword = this.keyword.trim();

    }

    private showMoreResultsLocalMarket()
    {
   
      var count = this.state.localMarketCount + 99;
      this.setState({
        ...this.state, 
        localMarketCount : count,
      });
  
    } 
    private showMoreResultsEnterprise() 
    {
      var count = this.state.enterpriseMarketCount + 99; 
      this.setState({
        ...this.state,
        enterpriseMarketCount : count, 
      }); 
    }
    
    public getParameter(param, query) {
        //debugger;
        let reg = new RegExp('[?]' + param + '=([^]*)', 'i');
        let queryString = reg.exec(query);
        return queryString ? decodeURIComponent(queryString[1]) : null;
    }

    public redirectModalClose()
    {
        this.setState({
            ...this.state,
            redirectModalShow : false,
            redirectLink : ""
        });
    }

    public redirectPolicyPage()
    {
        this.setState({
            ...this.state,
            redirectModalShow: false,
        });
        if(this.state.redirectLink != "" || this.state.redirectLink != null)
            window.open(this.state.redirectLink,"_blank");
    }

    private redirectLink(e,link, external)
    {
        e.preventDefault();
        if(external)
        {
            this.setState({
                ...this.state,
                redirectModalShow : true,
                redirectLink : link
            });
        }
        else
        {
            window.open(link, "_blank");
        }
    }

    
    private showMore()
    {
        var count = this.state.count + 99;
        this.setState({
            ...this.state,
            count : count,
        });
    }
   
    getenterpricelistdata=()=> {
        var _this = this;
        var enterpricedata=""
       //const alldata:any[]=[];
        var filterData=[];
       var filterSOPData=[];
       var filterSystemData;
       var filterTrainingData;
       var filterSRdata;
       var filteracronymdata;
       var filterRecomnedata;
      var alldata;
       var  finalarray=[];
       var systemarray=[];
       var sopfilterdata=[];
        const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";
        const sopurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SOP')/items?$top=5000";
        const systemsurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Systems')/items?$top=5000";
        const trainingurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Training')/items?$top=5000";
        const supportingResourcesurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SupportingResources')/items?$top=5000";
        const acronymsurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Acronyms')/items?$top=5000";
        const recommendedurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Recommended')/items?$top=5000";
        return new Promise<any[]>((resolve, reject) => {
         jQuery.ajax({
         url: apiUrl,        
        type: 'GET',       
         headers: {        
         'Accept': 'application/json;odata=nometadata'       
        },      
         success: (result: any) => {       
         resolve(result.value);
         console.log("//",result.value)
         enterpricedata=result.value;
        
         if (result && result.value.length > 0 && result.value != null) {

                           filterData = result.value.filter((res) => {
            
                            if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                            {
            
                            const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyOverview = res.Overview && res.Overview.toLowerCase().includes(this.keyword.toLowerCase());
                            const keywords = res.Keywords && res.Keywords.toLowerCase().includes(this.keyword.toLowerCase());
                            const riskAreas = res.Risk_Domain && res.Risk_Domain.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyType = res.Policy_Type && res.Policy_Type.toLowerCase().includes(this.keyword.toLowerCase());
                            const policySection = res.PolicySubSection && res.PolicySubSection.Policy_SubSection.toLowerCase().includes(this.keyword.toLowerCase());
                            const polNumber = res.Policy_Number && res.Policy_Number.toLowerCase().includes(this.keyword.toLowerCase());

                            const guiding = res.Guiding_Principles && res.Guiding_Principles.toLowerCase().includes(this.keyword.toLowerCase());
                            const country = res.Geographic_Scope && res.Geographic_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const div = res.Enterprise_Division_BU_Scope && res.Enterprise_Division_BU_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const sponsoring = res.Policy_Sponsoring_Division && res.Policy_Sponsoring_Division.toLowerCase().includes(this.keyword.toLowerCase());
                            const reviewer = res.Divisional_Reviewer && res.Divisional_Reviewer.toLowerCase().includes(this.keyword.toLowerCase());
                            const contact = res.PolicyContact_Email && res.PolicyContact_Email.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyArea = res.PolicyArea.Title && res.PolicyArea.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            
                           
                            return title || policyOverview||keywords||riskAreas||policyType||policySection||polNumber||guiding||country||div||sponsoring||reviewer||contact||policyArea;
                            }
                         
                          console.log("filterpolicydata",filterData)
                         
            
                    })
  
        
         }
         jQuery.ajax({
            url: sopurl,        
           type: 'GET',       
            headers: {        
            'Accept': 'application/json;odata=nometadata'       
           },      
            success: (result: any) => {       
           
            console.log("Sop",result.value)
                       
            if (result && result.value.length > 0 && result.value != null) {
   
                             filterSOPData = result.value.filter((res) => {
               
                               if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                               {
               
                               const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                                                            
                              
                               return title;
                               }
                              
                           });
                           console.log("SOP filterdata",filterSOPData)
                        }
                           
                              
           },
            error: (error: any) => {
          
           }
            
            });
            jQuery.ajax({
                url: systemsurl,        
               type: 'GET',       
                headers: {        
                'Accept': 'application/json;odata=nometadata'       
               },      
                success: (result: any) => {       
               
                console.log("systemsurl",result.value)
                           
                if (result && result.value.length > 0 && result.value != null) {
       
                    filterSystemData= result.value.filter((res) => {
                   
                                   if(res.Systems_Name && res.Systems_Name!=null &&this.keyword && this.keyword!=null )
                                   {
                   
                                   const systems_Name = res.Systems_Name.trim().toLowerCase().includes(this.keyword.toLowerCase());
                                                                
                                  
                                   return systems_Name;
                                   
                                   }
                                   
                               });
                               console.log("filterSystemData",filterSystemData)
                            }
                               
        
               
               },
                error: (error: any) => {
              
               }
                
                });
                jQuery.ajax({
                    url: trainingurl,        
                   type: 'GET',       
                    headers: {        
                    'Accept': 'application/json;odata=nometadata'       
                   },      
                    success: (result: any) => {       
                   
                    console.log("trainingurl",result.value)
                               
                    if (result && result.value.length > 0 && result.value != null) {
           
                        filterTrainingData= result.value.filter((res) => {
                       
                                       if(res.Training_Name && res.Training_Name!=null &&this.keyword && this.keyword!=null )
                                       {
                       
                                       const training_Name = res.Training_Name.trim().toLowerCase().includes(this.keyword.toLowerCase());
                                                                    
                                      
                                       return training_Name;
                                       
                                       }
                                       
                                   });
                                   console.log("filterTrainingData",filterTrainingData)
                                }
                                   
            
                   
                   },
                    error: (error: any) => {
                  
                   }
                    
                    });
                    jQuery.ajax({
                        url: supportingResourcesurl,        
                       type: 'GET',       
                        headers: {        
                        'Accept': 'application/json;odata=nometadata'       
                       },      
                        success: (result: any) => {       
                       
                        console.log("supportingResourcesurl",result.value)
                                   
                        if (result && result.value.length > 0 && result.value != null) {
               
                            filterSRdata= result.value.filter((res) => {
                           
                                           if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                                           {
                           
                                           const titleSR = res.Title.trim().toLowerCase().includes(this.keyword.toLowerCase());
                                                                        
                                          
                                           return  titleSR;
                                           
                                           }
                                           
                                       });
                                       console.log("filterSRdata",filterSRdata)
                                    }
                                       
                
                       
                       },
                        error: (error: any) => {
                      
                       }
                        
                        });
                        jQuery.ajax({
                            url: acronymsurl,        
                           type: 'GET',       
                            headers: {        
                            'Accept': 'application/json;odata=nometadata'       
                           },      
                            success: (result: any) => {       
                           
                            console.log("acronymsurl",result.value)
                                       
                            if (result && result.value.length > 0 && result.value != null) {
                   
                                filteracronymdata= result.value.filter((res) => {
                               
                                               if(res.Acronym && res.Acronym!=null &&this.keyword && this.keyword!=null )
                                               {
                               
                                               const acronym = res.Acronym.trim().toLowerCase().includes(this.keyword.toLowerCase());
                                               const definition = res.Definition && res.Definition.toLowerCase().includes(this.keyword.toLowerCase());                           
                                              
                                               return  acronym||definition;
                                               
                                               }
                                               
                                           });
                                           console.log("filteracronymdata",filteracronymdata)
                                        }
                                           
                    
                           
                           },
                            error: (error: any) => {
                          
                           }
                            
                            });
                            jQuery.ajax({
                                url: recommendedurl,        
                               type: 'GET',       
                                headers: {        
                                'Accept': 'application/json;odata=nometadata'       
                               },      
                                success: (result: any) => {       
                               
                                console.log("recommendedurl",result.value)
                                           
                                if (result && result.value.length > 0 && result.value != null) {
                       
                                    filterRecomnedata= result.value.filter((res) => {
                                   
                                                   if(res.Document_Name && res.Document_Name!=null &&this.keyword && this.keyword!=null )
                                                   {
                                   
                                                   const document_Name = res.Document_Name.trim().toLowerCase().includes(this.keyword.toLowerCase());
                                                                                
                                                  
                                                   return  document_Name;
                                                   
                                                   }
                                                   
                                               });
                                               console.log("filterRecomnedata",filterRecomnedata)
                                            }
                                             this.allpolicyids=[...filterSOPData,...filterSystemData,...filterTrainingData,...filterSRdata,...filteracronymdata,...filterRecomnedata]
                                               console.log("allpolicyids",this.allpolicyids)
                                           const policyIds = this.allpolicyids.map(item => item.Policy_ID);
                                            const policyidmatch = `https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000&$filter=ID eq ${policyIds.join(' or ID eq ')}`;
                
                                            jQuery.ajax({
                                                url:  policyidmatch,
                                                type: 'GET',
                                                headers: {
                                                  'Accept': 'application/json;odata=nometadata'
                                                },      
                                         
                                                success: (anotherResult: any) => {
                                                    this.allListData = anotherResult.value;
                                                    console.log("finalData:", this.allListData);
                                    
                                                   
                                      
                                                  },
                                    })
                  if(this.allListData.length>0)
                            {
              this.allListData.forEach(function (value) {
                              
                           finalarray=value
                               console.log("num", finalarray);
                             }); 
                            }
                        else
                        {
                            finalarray=[];
                        }
                             alldata=filterData.concat(finalarray);
                             console.log("alldata268",alldata)
                                            this.setState({
                                  enterpriseSearchResults:alldata
                               }) 
                               console.log("alldata",this.state.enterpriseSearchResults)
                        
                               
                               },
                                error: (error: any) => {
                              
                               }
                                
                                });
       
        },
         error: (error: any) => {
       reject(error);
        }
         });
        
           
        
         });

         }
                 
        public getenterpriceSearchedPolicies()
        { 
          var _this = this;
          var searchedIds = [];
          //var siteUrl1="https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/CauCar"
          return new Promise<any>((resolve, reject) =>
          {
            
            sp.search({Querytext : this.keyword+" path:https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/Policy%20Documents/*", 
            RowLimit:_this.count,
            StartRow:_this.setRow,
            SelectProperties: ["RefinableInt00","RefinableString00"],
            TrimDuplicates: false
            }).
            then((p: SearchResults) => {
                console.log("P",p)
                for(var j=0 ; j <p.PrimarySearchResults.length ; j++)
                {
                    var ids = p.PrimarySearchResults[j]["RefinableInt00"];
                    var docType = p.PrimarySearchResults[j]["RefinableString00"];
                    if(ids != "")
                        searchedIds.push(parseInt(ids));
                    _this.setRow += 1;
                                   }
                if(p.PrimarySearchResults.length < _this.count)
                {
                    var result = this.getenterpricelistdata();
                    result.then(data => {
                        searchedIds = searchedIds.concat(data);
                        resolve(searchedIds);
                                           });
                }
                else
                {                   
                    var result1 = this.getenterpriceSearchedPolicies();
                    result1.then(function(data){
                        searchedIds = searchedIds.concat(data);
                        resolve(searchedIds);
                                           });
                }
            });
         });
        }

    public componentDidMount(): void {
       // this.getenterpricelistdata();
        this.getenterpriceSearchedPolicies();
        //this.getSOPdata();

        var _this = this;
        if (_this.keyword != null)
        {
            $(".se-pre-con").css("display", "block");
            $("#searchBox").val(_this.keyword);
        }
        
        _this.loadSection(this.props.userLanguage);

        sp.web.lists.getByTitle('Policies').items.getAll().then(data =>{
            if(data != null)
            {
                _this.allPolicies = data;
                if(_this.keyword != null && _this.keyword != "")
                    _this.displaySearchedPolicies();

            }
        });
        _this.AddEventListeners();

    }
    

    public componentWillReceiveProps(nextProps)
    {
        if(nextProps.userLanguage != this.props.userLanguage)
            this.loadSection(nextProps.userLanguage);
    }

    public render(): React.ReactElement<IPolicySearchProps> {


        let helpModalClose = () => this.setState({ helpModalShow: false });
        const handleSelect = (eventKey) => this.setState({ searchCategory: eventKey });
        return (
            <>
            <div className={`containerDiv ${ styless.paddingFooterBottom }`}  style={{ fontFamily: 'FS ALbert-Light', width: '100% !important', backgroundImage: 'none' }}>
                <div className="se-pre-con" style={{ display: 'none' }}></div>

                <div className={styless.banner} style={{ 'backgroundImage': "url("+this.props.context.WebFullUrl+"/SiteAssets/Images/BackgroundImage.svg)" }}>
                    <header>
                        <NavigationBar {...this.props}/>
                    </header>
                    <div className={styless.bannerText}>
                        <h6 id="sectionTitle"></h6>
                        <Form className="frmSearchBox" style={{ paddingBottom: "O%"}}>
                            <div id="divSearchControl" style={{ width: '40vw' , margin:'auto'}}>
                                <FormControl id="searchBox" style={{ height: '38px', borderRadius: '20px' }} type="text" placeholder={this.state.searchPlace} autoComplete="off"
                                />
                                <span><FontAwesomeIcon icon={faSearch} id="searchBoxIcon" style={{ float: 'right', marginRight: '8px', marginTop: '-25px', color: 'grey' }} /></span>
                            </div>
                        </Form>
                    </div>
                </div>
                {/* Search Results Tab Section  */}

                <div id="searchResults" className="divSearchresults" style={{ paddingLeft: '50px', paddingRight: '50px', paddingBottom: '50px' }}>

{(this.state.searched) &&

 <React.Fragment>

 <Nav variant="pills" defaultActiveKey="localMarketSearch" onSelect={handleSelect}>
 <Nav.Item style={{ border: '1px solid #808080', borderRadius: '10px', marginRight : '10px' }}>
 <Nav.Link eventKey="all">{this.state.allResults} ({((this.state.policies && this.state.policies.length) ? this.state.policies.length : 0) + ((this.state.enterpriseSearchResults && this.state.enterpriseSearchResults.length) ? this.state.enterpriseSearchResults.length : 0)})</Nav.Link>
 </Nav.Item>
 <Nav.Item style={{ border: '1px solid #808080', borderRadius: '10px', marginRight : '10px'}}>
 <Nav.Link eventKey="localMarketSearch">{this.state.localMarket} ({(this.state.policies && this.state.policies.length) ? this.state.policies.length : 0})</Nav.Link>
</Nav.Item>
 <Nav.Item style={{ border: '1px solid #808080', borderRadius: '10px', marginRight : '10px'}}>
 <Nav.Link eventKey="enterPriseSearch">{this.state.enterprise} ({(this.state.enterpriseSearchResults && this.state.enterpriseSearchResults.length) ? this.state.enterpriseSearchResults.length : 0})</Nav.Link>
</Nav.Item>
</Nav>
</React.Fragment>}
 </div>
                <div id="searchDiv" className="divSearchresults" style={{ paddingLeft: '50px', paddingRight: '50px' }}>
                {/* {(this.state.searched) && 
                <Row className={styless.searchDiv}>
                    <div className="col shadow card">
                        <div style={{marginLeft:'7%', marginRight:'7%'}}>
                            <FontAwesomeIcon icon={faExclamationCircle} className={styless.infoIcon}></FontAwesomeIcon>
                            <div className={styless.infoText} dangerouslySetInnerHTML={{__html: this.state.policyNote}}>                                             
                            </div>
                        </div>
                    </div>
                </Row>
                } */}
                 {(!this.state.searched && this.state.policies.length == 0) && 
                    <Row style={{height:'4vw'}}/>
                }
               {/*  {((this.state.searched !=false) && this.state.policies.length == 0) && 
                    <Row style={{height:'4vw'}}>
                          <div id="noSearchResultsDiv" style={{ textAlign: "center", fontSize: '22px', fontWeight: 'bold', marginTop: '1%', padding: '3% 1.3%' }}>{this.state.noResultsText}</div> 
                    </Row>
                } */}
                {this.state.searched && (this.state.searchCategory ==="all" || this.state.searchCategory ==="localMarketSearch") &&

        <React.Fragment>    

                                <Row><h5 style={{ padding: '50px 0px 0px 0px' }}>{this.state.localMarketResults}</h5></Row> <hr style={{ width: '100%', height: '1px', background: '#000000' }} />
                                {(this.state.policies.length == 0) &&
                                    <div dangerouslySetInnerHTML={{ __html: this.state.noResultsLocalMarket }} style={{ padding: "0px 50px 0px 50px", fontSize: '17px', fontWeight: 'bold', textAlign: "center" }}>

                                    </div>}
                                    {this.state.searched && (this.state.policies && this.state.policies.length > 0) &&

        <div id="localMarketSearch" className="row">
                        {
                        this.state.policies.slice(0,this.state.localMarketCount).map((item, index ) => (

                            <div className="col-lg-4 col-md-6 col-sm-12 col-xs-12 mt-4 linkTile" style={{display:'flex'}}>
                                <a  onClick={(e) => {this.redirectLink(e,item.Link, item.External)}}>
                                    <div className="shadow card policyTile text-center">
                                        <div className="polAdditional">
                                            {item.OverviewAll}
                                        </div>
                                        <div className="card-body">                                            
                                            <div className="polTitle">
                                                {item.Title || "" }
                                            </div>  
                                            <p className="polDetails mt-2">{this.state.policyId}:{this.state.localmarketid}  <br></br>{this.state.lastUpdated}:{this.formatDate(item.Modified)} </p>                                              
                                            <p className="polOverview mt-2">{item.Overview}</p>
                                        </div>
                                    </div>
                                </a>
                            </div>                        
                        )
                        )
                        }
                    </div>
    }
                    {(this.state.policies.length > this.state.localMarketCount) &&

                  <div id="divShowMore" style={{ textAlign: "center" }}>

                  <button style={{width:'170px', backgroundColor:'#0000ff'}} type="button" onClick={this.showMoreResultsLocalMarket} className="btnShowMore" id="showMore">{this.state.showMoreText}</button></div>

                }
                    </React.Fragment>
                    }
                </div>
                <div id="enterPriseSearch" className="divSearchresults" style={{ paddingLeft: '50px', paddingRight: '50px' }}>

            {/* Enterprise Search UI*/}           

            {this.state.searched && (this.state.searchCategory ==="all" || this.state.searchCategory ==="enterPriseSearch") &&

              <React.Fragment>

                                <Row><h5 style={{ padding: '50px 0px 0px 0px', textAlign: "left" }}>{this.state.enterpriseMarketResults}</h5></Row> <hr style={{ width: '100%', height: '1px', background: '#000000' }} />
                                {(this.state.enterpriseSearchResults.length == 0) &&

                                    <div dangerouslySetInnerHTML={{ __html: this.state.noResultsLocalMarket }} style={{ padding: "0px 50px 0px 50px", fontSize: '17px', fontWeight: 'bold', textAlign: "center" }}>

                                    </div>}

                                {this.state.searched && (this.state.enterpriseSearchResults && this.state.enterpriseSearchResults.length > 0) &&

                <div className="row">

                  {this.state.enterpriseSearchResults.slice(0, this.state.enterpriseMarketCount).map((item, index) => (

                    <div className="col-lg-4 col-md-6 col-sm-12 col-xs-12 mt-4 linkTile" style={{ display: 'flex' }}>

            <a target="_blank" href={item.ProfileURL}>

                        <div className="shadow card policyTile text-center">

                          <div className="polAdditional">

                            <div>{this.state.appMarketsText}: {item.ScopeAll}</div>

                            <div>{this.state.appDivisionsText}: {item.DivisionAll}</div>

                          </div>

                          <div className="card-body">

                            <Row>

                              <div className="polTitle col-sm-12">

                                {/* {(item.New) &&

                                  <div>

                                    <span className="newLabel">{this.state.newText}</span>

                                  </div>} */}

                                <div>

                                  {item.Title || ""}

                                </div>

                              </div>

                              <div className="col-sm-1" style={{ float: "right", textAlign: "right" }}>

                                {(item.Subscribed == true) &&

                                  <button className="unsubscribe minusicon" title={this.state.unsubscribeText} value={item.Id}>

                                  </button>}

                                {(item.Subscribed == false) &&

                                  <button className="subscribe plusicon" title={this.state.subscribeText} value={item.Id}>

                                  </button>}

                              </div>

                              <div className="col-sm-1" style={{ float: "right", textAlign: "right" }}>

                                {(item.Bookmarked == true) &&

                                  <i className="fa fa-bookmark" {...item.Attr} title={this.state.removeBookmarkText} style={{ fontSize: '35px' }}></i>}

                                {(item.Bookmarked == false) &&

                                  <i className="fa fa-bookmark-o" title={this.state.bookmarkText} style={{ fontSize: '35px' }}></i>}

                              </div>

                            </Row>
                            
                            <p className="polDetails mt-2">{this.state.policyId}: {item.Policy_Number} <br></br>{this.state.lastUpdated}: {item.Last_Updated?<span>{this.formatDate(item.Last_Updated)}</span>:<p></p>}</p>

                            <p className="polOverview mt-2" style={{textOverflow:"ellipsis",overflow:"hidden",display:"-webkit-box",WebkitLineClamp:6,WebkitBoxOrient:"vertical"}}>{item.Overview}</p>

                            {/* {this.dynamicListingPolicies(item.ScopeAll, item.DivisionAll, item.Title, item.Overview)} */}




                          </div>

                          {(item.External) &&

                            <p className="nonHostedLink polNonHosted"> {this.state.readMoreText} </p>}

                        </div>

                      </a>

                    </div>

                  )

                  )}

                </div>    
    } 

           

            {/* {(this.state.searched) && <div id="footerNote" style={{ paddingTop: '30px', fontSize: '17px', fontWeight: 'bold', textAlign: "center"}}>

              No enterprise market is available for selected language.If you don’t find the results you are seeking in your native language, please also try your search in English.

            </div>} */}

                {(this.state.enterpriseSearchResults.length > this.state.enterpriseMarketCount) &&

                  <div id="divShowMore" style={{ textAlign: "center" }}>

                    <button style={{ width: '170px', backgroundColor: '#0000ff' }} type="button" onClick={this.showMoreResultsEnterprise} className="btnShowMore" id="showMore">{this.state.showMoreText}</button></div>

                }

            </React.Fragment>}

          </div>


            </div>
            <Redirect_Page
            show={this.state.redirectModalShow}
            cancelAlert={this.redirectModalClose}
            redirectAlert={this.redirectPolicyPage} userLanguage={this.props.userLanguage}
            context={this.props.context}/> 
          </>
        );
    }

    private loadSection(language):void {
        var  _this = this;
        var configItems = sp.web.lists.getByTitle('ConfigurationList').items.filter("(Key eq 'SearchBar' or Component eq 'PolicySearch' or Key eq 'NoResultsText' or Key eq 'ShowMoreText' or Key eq 'AllResults' or Key eq 'LocalMarket' or Key eq 'Enterprise' or Key eq 'EnterpriseMarketResults' or Key eq 'LocalMarketResults' or Key eq 'NoLocalMarket' or Key eq 'AddFiltersText') and Language eq '" + language + "'").get();
        configItems.then(function (items) {
            console.log(items);
            var secTitle = "";
            var policyNote = "";
            var searchBar = "";
            var noResults = "";
            var showMore = "";
            var allresults = "";
            var localmarket = "";
            var enterPrise = "";
            var enterprisemarketresults = "";
            var localmarketresults = "";
            var nolocalmarket = "";
            var addFilters = "";
            var allresults="";
            var policyid="";
            var lastupdated="";
                        for (var i = 0; i < items.length; i++) {
                if (items[i].Key == "PageTitle")
                    $("#sectionTitle").html(items[i].Value);
                else if (items[i].Key == "SearchBar")
                    searchBar  = (items[i].Value);
                else if (items[i].Key == "NoResultsText")
                    noResults = (items[i].Value);
                    else if (items[i].Key == "ShowMoreText") {
                        showMore = items[i].Value;
                    }
    else if (items[i].Key == "AllResults") {
                        allresults = items[i].Value;
                    }
                    else if (items[i].Key == "LocalMarket") {
                        localmarket = items[i].Value;
                    }
                    else if (items[i].Key == "Enterprise") {
                        enterPrise = items[i].Value;
                    }
                    else if (items[i].Key == "EnterpriseMarketResults") {
                        enterprisemarketresults = items[i].Value;
                    }
                    else if (items[i].Key == "LocalMarketResults") {
                        localmarketresults = items[i].Value;
                    }
                    else if (items[i].Key == "NoLocalMarket") {
                        nolocalmarket = items[i].Value;
                    }
    else if (items[i].Key == "AddFiltersText") {
                        addFilters = items[i].Value;
                    }
                    else if (items[i].Key == "PolicyIDText") {
                        policyid = items[i].Value;
                    }
                    else if (items[i].Key == "LastUpdated") {
                        lastupdated = items[i].Value;
                    }
                else if(items[i].Key == "SearchNote")
                {
                    var tempArr = (items[i].Value || "").split("#1#");
                    if(tempArr.length > 1)
                        tempArr[1] = "<span class='enterpriseLink "+styless.enterpriseLink+"'>" + tempArr[1].trim() + "</span>";
                    
                    policyNote = tempArr.join('');
                }
            }
            _this.setState({
                ..._this.state,
                sectionTitle : secTitle,
                policyNote : policyNote,
                searchPlace : searchBar,
                noResultsText: noResults,
                showMoreText: showMore,
                noResultsLocalMarket: nolocalmarket,
                noResultsEnterpriseMarket: noResults,
                allResults: allresults,
                localMarket: localmarket,
                enterprise: enterPrise,
                enterpriseMarketResults: enterprisemarketresults,
                localMarketResults: localmarketresults,
                addFiltersText: addFilters,
                 policyId:policyid,
                lastUpdated:lastupdated,
            });
        });
    }
    private AddEventListeners(): any {
        
        var _this = this;

        $("#searchBox").keydown(function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                $("#searchBoxIcon").click();
            }
        });


        $(document).mouseup(function (e) {
            var container = $("#divSearchControl");
            if (!container.is(e.target) && container.has(e.target).length === 0) {
                $("#divFrequentSearch").hide();
                $("#searchBox").removeClass('searchBoxFocused');
            }
        });


        $("#searchBoxIcon").click(function (event) {
         
            var queryString = $("#searchBox").val();
            if (queryString.trim().length > 0) {

                var url = window.location.href.split('#')[0] + "#/PolicySearch?q=" + queryString.trim();
                history.pushState(null, null, url);
                _this.keyword = queryString.trim();
                _this.objPolicySearch.setRow = 0;
                _this.displaySearchedPolicies();

                
            }
        });

        $(document).delegate('.enterpriseLink', 'click', function (event){
            event.preventDefault();
            var link  = _this.props.context.SiteFullUrl+"/SitePages/Welcome.aspx#/LandingPage";
            _this.setState({
                ..._this.state,
                redirectModalShow : true,
                redirectLink: link
            })
        });




    }
    formatDate = (date:string)=>
    {
      const formatteddate= new Date(date).toLocaleDateString('en-GB',{day:'2-digit',month:'2-digit',year:'numeric'});
     return formatteddate;  

    };

    
    /*private addSearchKeyword() {
        var _this = this;
        var keyToSearch = _this.keyword.toLowerCase();
        if (keyToSearch != "") {
            var res = sp.web.lists.getByTitle('Search').items.filter("Title eq '" + keyToSearch + "'").top(1).get();
            res.then(function (data) {
                if (data != null && data.length > 0) {
                    var id = data[0].Id;
                    var objItem = new Object();
                    objItem["Count"] = data[0].Count + 1;
                    sp.web.lists.getByTitle('Search').items.getById(id).update(objItem);
                }
                else {
                    var objItem = new Object();
                    objItem["Title"] = keyToSearch;
                    objItem["Count"] = 1;
                    sp.web.lists.getByTitle('Search').items.add(objItem);
                }
            });
        }

    }*/

    public displaySearchedPolicies(): void {
      
        $(".se-pre-con").css("display", "block");
        var _this = this;
        $("#searchBox").val(_this.keyword);
        this.setState({enterpriseMarketResults:[] }, () => this.getenterpricelistdata())     
        var searchResult = _this.objPolicySearch.loadSearchedPolicies(_this.keyword, _this.siteUrl);
        var count = 0;
        var results = [];

       console.log("586", _this.allPolicies)
        searchResult.then(librarySearch => {
            _this.objPolicySearch.setRow = 0;
            _this.objPolicySearch.searchList(_this.keyword,_this.siteUrl).then(async listSearch => {
                _this.objPolicySearch.setRow = 0;
                var temp  = _this.allPolicies.filter(d => {return (librarySearch[d.DocumentId] != null || listSearch.indexOf(d.Id) > -1)});
                temp = temp.filter(d => {return d.Status == "Published"});
                temp = temp.sort((a,b) => (a.Title > b.Title ? 1 : -1));
                for (var i = 0; i < temp.length; i++) {
                    var element = temp[i];
                    count += 1;
                    var external = false;
                    var link = librarySearch[element.DocumentId] || "";
                    if(link == "" && element.DocumentId != null)
                    {
                        var docRef = await sp.web.lists.getByTitle('Policy Documents').items.getById(element.DocumentId).select("*,FileRef").get().then(async d =>{
                            if(d != null)
                                link = d.FileRef ;

                        }).catch(err =>{
                            console.log(err);
                        });
                        
                    }
                    if(link == "")
                    {
                        link = element.Policy_Link || "";
                        if(link.toLowerCase().indexOf(this.siteUrl.toLowerCase()) == -1)
                            external = true;
                    }

                    var overview = element.Overview != null ? element.Overview : "";
                    var overviewAll = element.Overview != null ? element.Overview : "";
                    overview = overview.length > 180 ? overview.substring(0, 177) + "..." : overview;
var modified= element.Modified;
                    var policyContact = element.Policy_Contact || "";     
                    var item = {
                        Title : element.Title,
                        Id: element.Id,
                        Overview : overview,
                        OverviewAll:overviewAll,
                        Link : link,
                        PolicyContact : policyContact,
                        External : external,
                        Modified:modified
                    };
                    results.push(item);                    
                }
                _this.setState({
                    ..._this.state,
                    policies:results,
                    searched : true
                });
                console.log("Local Market",this.state.policies);
            });

            
            $(".se-pre-con").css("display", "none");
        });

    }
   
}

========================
jQuery.ajax({
    url: apiUrl,
    type: 'GET',
    headers: {
        'Accept': 'application/json;odata=nometadata'
    },
    success: (result: any) => {
        // Your existing success callback code
        resolve(result.value);
        console.log("///////////////", result.value);
        enterpricedata = result.value;

        if (result && result.value.length > 0 && result.value != null) {
            filterData = result.value.filter((res) => {
                // Your existing filtering logic
                // ...
            });

            // Fetching additional API data inside the success callback
            // First additional API call
            jQuery.ajax({
                url: apiUrl2, // Replace with the URL of the second API
                type: 'GET',
                headers: {
                    // Headers for the second API request if needed
                },
                success: (result2: any) => {
                    // Handle the data from the second API here
                    console.log("Data from the second API:", result2);
                    // You can process the data or assign it to a variable as needed
                },
                error: (error2: any) => {
                    // Handle errors from the second API request
                    console.error("Error from the second API:", error2);
                }
            });

            // Second additional API call
            jQuery.ajax({
                url: apiUrl3, // Replace with the URL of the third API
                type: 'GET',
                headers: {
                    // Headers for the third API request if needed
                },
                success: (result3: any) => {
                    // Handle the data from the third API here
                    console.log("Data from the third API:", result3);
                    // You can process the data or assign it to a variable as needed
                },
                error: (error3: any) => {
                    // Handle errors from the third API request
                    console.error("Error from the third API:", error3);
                }
            });
        }
    },
    error: (error: any) => {
        reject(error);
    }
});


≈=======


uery.ajax({
         url: apiUrl,        
        type: 'GET',       
         headers: {        
         'Accept': 'application/json;odata=nometadata'       
        },      
         success: (result: any) => {       
         resolve(result.value);
         console.log("///////////////",result.value)
         enterpricedata=result.value;
        
         if (result && result.value.length > 0 && result.value != null) {

                           filterData = result.value.filter((res) => {
            
                            if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                            {
            
                            const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyOverview = res.Overview && res.Overview.toLowerCase().includes(this.keyword.toLowerCase());
                            const keywords = res.Keywords && res.Keywords.toLowerCase().includes(this.keyword.toLowerCase());
                            const riskAreas = res.Risk_Domain && res.Risk_Domain.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyType = res.Policy_Type && res.Policy_Type.toLowerCase().includes(this.keyword.toLowerCase());
                            const policySection = res.PolicySubSection && res.PolicySubSection.Policy_SubSection.toLowerCase().includes(this.keyword.toLowerCase());
                            const polNumber = res.Policy_Number && res.Policy_Number.toLowerCase().includes(this.keyword.toLowerCase());

                            const guiding = res.Guiding_Principles && res.Guiding_Principles.toLowerCase().includes(this.keyword.toLowerCase());
                            const country = res.Geographic_Scope && res.Geographic_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const div = res.Enterprise_Division_BU_Scope && res.Enterprise_Division_BU_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const sponsoring = res.Policy_Sponsoring_Division && res.Policy_Sponsoring_Division.toLowerCase().includes(this.keyword.toLowerCase());
                            const reviewer = res.Divisional_Reviewer && res.Divisional_Reviewer.toLowerCase().includes(this.keyword.toLowerCase());
                            const contact = res.PolicyContact_Email && res.PolicyContact_Email.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyArea = res.PolicyArea.Title && res.PolicyArea.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            
                           
                            return title || policyOverview||keywords||riskAreas||policyType||policySection||polNumber||guiding||country||div||sponsoring||reviewer||contact||policyArea;
                            }
                         
                          console.log("filterpolicydata",filterData)
                         
            
                    })
  
        
         }
          
       
        },
         error: (error: any) => {
       reject(error);
        }
         });
====================================
// Add this after fetching SOP data
jQuery.ajax({
    url: systemsurl,
    type: 'GET',
    headers: {
        'Accept': 'application/json;odata=nometadata'
    },
    success: (result: any) => {
        console.log("Systems Data:", result.value);

        // Filter the system data if needed
        filterSystemData = result.value.filter((res) => {
            // Your filtering logic here, similar to the filtering logic for policies
            // For example:
            // const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
            // return title;
        });

        // You can process the filterSystemData as per your requirements or concatenate it with other data
        // For example, if you want to combine filterData and filterSystemData, you can use concat:
        // alldata = filterData.concat(filterSystemData);

        // If you need to use filterSystemData separately, you can store it in an array, for example:
        // systemarray = filterSystemData;
    },
    error: (error: any) => {
        // Handle error if necessary
    }
});


// Add this after fetching SOP data
jQuery.ajax({
    url: systemsurl,
    type: 'GET',
    headers: {
        'Accept': 'application/json;odata=nometadata'
    },
    success: (result: any) => {
        console.log("Systems Data:", result.value);

        // Filter the system data if needed
        filterSystemData = result.value.filter((res) => {
            // Your filtering logic here, similar to the filtering logic for policies
            // For example:
            // const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
            // return title;
        });

        // You can process the filterSystemData as per your requirements or concatenate it with other data
        // For example, if you want to combine filterData and filterSystemData, you can use concat:
        // alldata = filterData.concat(filterSystemData);

        // If you need to use filterSystemData separately, you can store it in an array, for example:
        // systemarray = filterSystemData;
    },
    error: (error: any) => {
        // Handle error if necessary
    }
});


==========



getenterpricelistdata=()=> {
        var _this = this;
        var enterpricedata=""
       //const alldata:any[]=[];
        var filterData;
       var filterSOPData;
       var filterSystemData;
       var filterTrainingData;
       var filterSRdata;
       var filteracronymdata;
       var filterRecomnedata;
      var alldata;
       var soparray=[];
       var systemarray=[];
       var sopfilterdata=[];
        const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";
        const sopurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SOP')/items?$top=5000";
        const systemsurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Systems')/items?$top=5000";
        const trainingurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Training')/items?$top=5000";
        const supportingResourcesurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SupportingResources')/items?$top=5000";
        const acronymsurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Acronyms')/items?$top=5000";
        const recommendedurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Recommended')/items?$top=5000";
        return new Promise<any[]>((resolve, reject) => {
         jQuery.ajax({
         url: apiUrl,        
        type: 'GET',       
         headers: {        
         'Accept': 'application/json;odata=nometadata'       
        },      
         success: (result: any) => {       
         resolve(result.value);
         console.log("///////////////",result.value)
         enterpricedata=result.value;
        
         if (result && result.value.length > 0 && result.value != null) {

                           filterData = result.value.filter((res) => {
            
                            if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                            {
            
                            const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyOverview = res.Overview && res.Overview.toLowerCase().includes(this.keyword.toLowerCase());
                            const keywords = res.Keywords && res.Keywords.toLowerCase().includes(this.keyword.toLowerCase());
                            const riskAreas = res.Risk_Domain && res.Risk_Domain.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyType = res.Policy_Type && res.Policy_Type.toLowerCase().includes(this.keyword.toLowerCase());
                            const policySection = res.PolicySubSection && res.PolicySubSection.Policy_SubSection.toLowerCase().includes(this.keyword.toLowerCase());
                            const polNumber = res.Policy_Number && res.Policy_Number.toLowerCase().includes(this.keyword.toLowerCase());

                            const guiding = res.Guiding_Principles && res.Guiding_Principles.toLowerCase().includes(this.keyword.toLowerCase());
                            const country = res.Geographic_Scope && res.Geographic_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const div = res.Enterprise_Division_BU_Scope && res.Enterprise_Division_BU_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const sponsoring = res.Policy_Sponsoring_Division && res.Policy_Sponsoring_Division.toLowerCase().includes(this.keyword.toLowerCase());
                            const reviewer = res.Divisional_Reviewer && res.Divisional_Reviewer.toLowerCase().includes(this.keyword.toLowerCase());
                            const contact = res.PolicyContact_Email && res.PolicyContact_Email.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyArea = res.PolicyArea.Title && res.PolicyArea.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            
                           
                            return title || policyOverview||keywords||riskAreas||policyType||policySection||polNumber||guiding||country||div||sponsoring||reviewer||contact||policyArea;
                            }
                         
                          
                         
            
                    })
  
        
         }
            
         jQuery.ajax({
            url: sopurl,        
           type: 'GET',       
            headers: {        
            'Accept': 'application/json;odata=nometadata'       
           },      
            success: (result: any) => {       
           
            console.log("Sop",result.value)
                       
            if (result && result.value.length > 0 && result.value != null) {
   
                             filterSOPData = result.value.filter((res) => {
               
                               if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                               {
               
                               const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                                                            
                              
                               return title;
                               }
                           });
                        }
                           
                               const policyIds = filterSOPData.map(item => item.Policy_ID);
                               const policyidmatch = `https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000&$filter=ID eq ${policyIds.join(' or ID eq ')}`;
   
                               jQuery.ajax({
                                   url:  policyidmatch,
                                   type: 'GET',
                                   headers: {
                                     'Accept': 'application/json;odata=nometadata'
                                   },      
                            
                                   success: (anotherResult: any) => {
                                       this.sopListData = anotherResult.value;
                                       console.log("Data from Another List:", this.sopListData);
                       
                                      
                         
                                     },
                       })
     if(this.sopListData.length>0)
               {
 this.sopListData.forEach(function (value) {
                 
              soparray=value
                  console.log("num",soparray);
                }); 
               }
           else
           {
            soparray=[];
           }
                alldata=filterData.concat(soparray);
                console.log("alldata268",alldata)
                               this.setState({
                     enterpriseSearchResults:alldata
                  }) 
                  console.log("alldata",this.state.enterpriseSearchResults)
           
           },
            error: (error: any) => {
          
           }
            
            });
           
        
        },
         error: (error: any) => {
       reject(error);
        }
         });
         });

         }

=====================getenterpricelistdata=()=> {
        var _this = this;
        var enterpricedata=""
        var alldata=[];
        const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";
       
        return new Promise<any[]>((resolve, reject) => {
         jQuery.ajax({
         url: apiUrl,        
        type: 'GET',       
         headers: {        
         'Accept': 'application/json;odata=nometadata'       
        },      
         success: (result: any) => {       
         resolve(result.value);
         console.log("///////////////",result.value)
         enterpricedata=result.value;
        
         if (result && result.value.length > 0 && result.value != null) {

                          let filterData = result.value.filter((res) => {
            
                            if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                            {
            
                            const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyOverview = res.Overview && res.Overview.toLowerCase().includes(this.keyword.toLowerCase());
                            const keywords = res.Keywords && res.Keywords.toLowerCase().includes(this.keyword.toLowerCase());
                            const riskAreas = res.Risk_Domain && res.Risk_Domain.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyType = res.Policy_Type && res.Policy_Type.toLowerCase().includes(this.keyword.toLowerCase());
                            const policySection = res.PolicySubSection && res.PolicySubSection.Policy_SubSection.toLowerCase().includes(this.keyword.toLowerCase());
                            const polNumber = res.Policy_Number && res.Policy_Number.toLowerCase().includes(this.keyword.toLowerCase());

                            const guiding = res.Guiding_Principles && res.Guiding_Principles.toLowerCase().includes(this.keyword.toLowerCase());
                            const country = res.Geographic_Scope && res.Geographic_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const div = res.Enterprise_Division_BU_Scope && res.Enterprise_Division_BU_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const sponsoring = res.Policy_Sponsoring_Division && res.Policy_Sponsoring_Division.toLowerCase().includes(this.keyword.toLowerCase());
                            const reviewer = res.Divisional_Reviewer && res.Divisional_Reviewer.toLowerCase().includes(this.keyword.toLowerCase());
                            const contact = res.PolicyContact_Email && res.PolicyContact_Email.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyArea = res.PolicyArea.Title && res.PolicyArea.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            
                           
                            return title || policyOverview||keywords||riskAreas||policyType||policySection||polNumber||guiding||country||div||sponsoring||reviewer||contact||policyArea;
                            }
                         
                          
                         
            
                    })
  
            console.log("179",filterData)
                          this.setState({
                enterpriseSearchResults:filterData
             })  }
            
        
        
        
        },
         error: (error: any) => {
       reject(error);
        }
         });
         });

         }
         getSOPdata=()=>
         {
            var _this = this;
            var enterpricedata=""
            var alldata=[];
            const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";
    
            const systemurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SOP')/items?$top=5000";
              // Combine both requests using jQuery.when
                                 
              
           
             jQuery.ajax({
             url: systemurl,        
            type: 'GET',       
             headers: {        
             'Accept': 'application/json;odata=nometadata'       
            },      
             success: (result: any) => {       
            
             console.log("Sop",result.value)
             enterpricedata=result.value;
            
             if (result && result.value.length > 0 && result.value != null) {
    
                              let filterSOPData = result.value.filter((res) => {
                
                                if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                                {
                
                                const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                                                             
                               
                                return title;
                                }
                            });
                                const policyIds = filterSOPData.map(item => item.Policy_ID);
                                const policyidmatch = `https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$filter=ID eq ${policyIds.join(' or ID eq ')}`;
    
                                jQuery.ajax({
                                    url:  policyidmatch,
                                    type: 'GET',
                                    headers: {
                                      'Accept': 'application/json;odata=nometadata'
                                    },      
                             
                                    success: (anotherResult: any) => {
                                        const anotherListData = anotherResult.value;
                                        console.log("Data from Another List:", anotherListData);
                          
                                        // Further processing or data manipulation if needed
                          
                                        // Set the state or update the UI with the final data
                                        // this.setState({ data: combinedData });
                          
                                      },
                        })
      
                console.log("179",filterSOPData)
                              this.setState({
                    enterpriseSearchResults:filterSOPData
                 }) 
                 }
                
            
            
            
            },
             error: (error: any) => {
           
            }
             
             });
         }
=======================export default class MySPFxWebPart extends React.Component<IMySPFxWebPartProps, {}> {
  public componentDidMount() {
    this.loadData();
  }

  private loadData() {
    const systemurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SOP')/items?$top=5000";

    // Make the first AJAX request to get data from the "SOP" list
    jQuery.ajax({
      url: systemurl,
      type: 'GET',
      headers: {
        'Accept': 'application/json;odata=nometadata'
      },
      success: (result: any) => {
        const enterpricedata = result.value;
        console.log("Sop", enterpricedata);

        if (enterpricedata && enterpricedata.length > 0) {
          let filterSOPData = enterpricedata.filter((res) => {
            if (res.Title && res.Title !== null && this.props.keyword && this.props.keyword !== null) {
              const title = res.Title.toLowerCase().includes(this.props.keyword.toLowerCase());
              return title;
            }
          });

          // Extract Policy IDs from the filtered data
          const policyIds = filterSOPData.map(item => item.Id);

          // Now, make another AJAX request to get data from another SharePoint list based on policyIds
          const anotherListUrl = `https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('AnotherList')/items?$filter=PolicyID eq ${policyIds.join(' or PolicyID eq ')}`;

          jQuery.ajax({
            url: anotherListUrl,
            type: 'GET',
            headers: {
              'Accept': 'application/json;odata=nometadata'
            },
            success: (anotherResult: any) => {
              const anotherListData = anotherResult.value;
              console.log("Data from Another List:", anotherListData);

              // Further processing or data manipulation if needed

              // Set the state or update the UI with the final data
              // this.setState({ data: combinedData });

            },
            error: (error: any) => {
              console.error("Error fetching data from Another List:", error);
            }
          });
        } else {
          // No data found, resolve with an empty array
          // this.setState({ data: [] });
        }
      },
      error: (error: any) => {
        console.error("Error fetching SOP data:", error);
      }
    });
  }

  public render(): React.ReactElement<IMySPFxWebPartProps> {
    // Render your web part UI here
    return (
      <div>
        {/* Your web part UI */}
      </div>
    );
  }
}


==========
var _this = this;
var enterpricedata = "";

const systemurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SOP')/items?$top=5000";

// Function to fetch additional data from another SharePoint list
function fetchDataFromAnotherList(itemIds) {
  const anotherListUrl = `https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('AnotherList')/items?$filter=PolicyID eq ${itemIds.join(' or PolicyID eq ')}`;

  return new Promise<any>((resolve, reject) => {
    jQuery.ajax({
      url: anotherListUrl,
      type: 'GET',
      headers: {
        'Accept': 'application/json;odata=nometadata'
      },
      success: (result: any) => {
        resolve(result.value);
      },
      error: (error: any) => {
        reject(error);
      }
    });
  });
}

return new Promise<any[]>((resolve, reject) => {
  jQuery.ajax({
    url: systemurl,
    type: 'GET',
    headers: {
      'Accept': 'application/json;odata=nometadata'
    },
    success: (result: any) => {
      resolve(result.value);
      console.log("Sop", result.value);
      enterpricedata = result.value;

      if (result && result.value.length > 0 && result.value != null) {
        let filterSOPData = result.value.filter((res) => {
          if (res.Title && res.Title != null && _this.keyword && _this.keyword != null) {
            const title = res.Title.toLowerCase().includes(_this.keyword.toLowerCase());
            return title;
          }
        });

        // Extract Policy IDs from the filtered data
        const policyIds = filterSOPData.map(item => item.Id);

        // Now, make another API call to get data from another SharePoint list based on policyIds
        fetchDataFromAnotherList(policyIds)
          .then((anotherListData: any[]) => {
            // Combine the data from both lists or perform any additional processing you need.
            // For example, you can merge the data or do any other operations here.
            console.log("Data from Another List:", anotherListData);

            // Further processing or data manipulation if needed

            // Final resolved data (if required)
            resolve(filterSOPData);
          })
          .catch((error: any) => {
            console.error("Error fetching data from Another List:", error);
            // If an error occurs, you can reject the promise here.
            reject(error);
          });
      } else {
        // No data found, resolve with an empty array
        resolve([]);
      }
    },
    error: (error: any) => {
      console.error("Error fetching SOP data:", error);
      reject(error);
    }
  });
});

≈=======

var _this = this;
            var enterpricedata=""
            var alldata=[];
            const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";
    
            const systemurl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('SOP')/items?$top=5000";
              // Combine both requests using jQuery.when
                                 
              
            return new Promise<any[]>((resolve, reject) => {
             jQuery.ajax({
             url: systemurl,        
            type: 'GET',       
             headers: {        
             'Accept': 'application/json;odata=nometadata'       
            },      
             success: (result: any) => {       
             resolve(result.value);
             console.log("Sop",result.value)
             enterpricedata=result.value;
            
             if (result && result.value.length > 0 && result.value != null) {
    
                              let filterSOPData = result.value.filter((res) => {
                
                                if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                                {
                
                                const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                               
                                
                               
                                return title;
                                }
                             
                              
                             
                
                        })
      

=========const getAllListData = () => {
  const policyApiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";
  const anotherListApiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('AnotherList')/items?$select=*,Column1,Column2,Column3&$top=5000";
  
  const policyRequest = jQuery.ajax({
    url: policyApiUrl,
    type: 'GET',
    headers: {
      'Accept': 'application/json;odata=nometadata'
    }
  });

  const anotherListRequest = jQuery.ajax({
    url: anotherListApiUrl,
    type: 'GET',
    headers: {
      'Accept': 'application/json;odata=nometadata'
    }
  });

  // Combine both requests using jQuery.when
  return jQuery.when(policyRequest, anotherListRequest).then((policyResult, anotherListResult) => {
    const policyData = policyResult[0].value;
    const anotherListData = anotherListResult[0].value;

    console.log("Policies Data: ", policyData);
    console.log("AnotherList Data: ", anotherListData);

    // Process the data as needed
    return {
      policies: policyData,
      anotherList: anotherListData
    };
  });
};


getenterpricelistdata=()=> {
        var _this = this;
        var enterpricedata=""
  
        const apiUrl = "https://pfizer.sharepoint.com/sites/PolicyPoint-Dev/_api/web/lists/getbytitle('Policies')/items?$select=*,Policy_Owner/Title,Policy_Delegate/Title,PolicyArea/Title,PolicySubSection/Policy_SubSection&$expand=Policy_Owner,Policy_Delegate,PolicyArea,PolicySubSection&$top=5000";
        return new Promise<any[]>((resolve, reject) => {
         jQuery.ajax({
         url: apiUrl,        
        type: 'GET',       
         headers: {        
         'Accept': 'application/json;odata=nometadata'       
        },      
         success: (result: any) => {       
         resolve(result.value);
         console.log("///////////////",result.value)
         enterpricedata=result.value;
        
         if (result && result.value.length > 0 && result.value != null) {

                          let filterData = result.value.filter((res) => {
            
                            if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
                            {
            
                            const title = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyOverview = res.Overview && res.Overview.toLowerCase().includes(this.keyword.toLowerCase());
                            const keywords = res.Keywords && res.Keywords.toLowerCase().includes(this.keyword.toLowerCase());
                            const riskAreas = res.Risk_Domain && res.Risk_Domain.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyType = res.Policy_Type && res.Policy_Type.toLowerCase().includes(this.keyword.toLowerCase());
                            const policySection = res.PolicySubSection && res.PolicySubSection.Policy_SubSection.toLowerCase().includes(this.keyword.toLowerCase());
                            const polNumber = res.Policy_Number && res.Policy_Number.toLowerCase().includes(this.keyword.toLowerCase());

                            const guiding = res.Guiding_Principles && res.Guiding_Principles.toLowerCase().includes(this.keyword.toLowerCase());
                            const country = res.Geographic_Scope && res.Geographic_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const div = res.Enterprise_Division_BU_Scope && res.Enterprise_Division_BU_Scope.toLowerCase().includes(this.keyword.toLowerCase());
                            const sponsoring = res.Policy_Sponsoring_Division && res.Policy_Sponsoring_Division.toLowerCase().includes(this.keyword.toLowerCase());
                            const reviewer = res.Divisional_Reviewer && res.Divisional_Reviewer.toLowerCase().includes(this.keyword.toLowerCase());
                            const contact = res.PolicyContact_Email && res.PolicyContact_Email.toLowerCase().includes(this.keyword.toLowerCase());
                            const policyArea = res.PolicyArea.Title && res.PolicyArea.Title.toLowerCase().includes(this.keyword.toLowerCase());
                            
                           
                            return title || policyOverview||keywords||riskAreas||policyType||policySection||polNumber||guiding||country||div||sponsoring||reviewer||contact||policyArea;
                            }
                         
                          
                         
            
                    })
  
            console.log("179",filterData)
                          this.setState({
                enterpriseSearchResults:filterData
             })  }
            
        
        
        
        },
         error: (error: any) => {
       reject(error);
        }
         });
         });

         }

===========import React, { Component } from 'react';

class SharePointData extends Component {
  constructor(props) {
    super(props);
    this.state = {
      filterData: [],
    };
  }

  componentDidMount() {
    // Fetch data from multiple SharePoint lists and store them in the state.
    // Example:
    // fetchSharePointList1Data().then((list1Data) => this.setState({ list1Data }));
    // fetchSharePointList2Data().then((list2Data) => this.setState({ list2Data }));
    // ...
    // fetchSharePointList6Data().then((list6Data) => this.setState({ list6Data }));
  }

  filterDataByKeyword = () => {
    const { list1Data, list2Data, list3Data, list4Data, list5Data, list6Data, keyword } = this.state;

    // Filter data for each list separately
    const filterDataList1 = this.filterListData(list1Data, keyword, 'Title', 'Description');
    const filterDataList2 = this.filterListData(list2Data, keyword, 'Name', 'Desc');
    const filterDataList3 = this.filterListData(list3Data, keyword, 'ItemTitle', 'ItemDesc');
    const filterDataList4 = this.filterListData(list4Data, keyword, 'ProjectName', 'ProjectDescription');
    const filterDataList5 = this.filterListData(list5Data, keyword, 'TaskTitle', 'TaskDescription');
    const filterDataList6 = this.filterListData(list6Data, keyword, 'EventName', 'EventDescription');

    // Combine the filtered results from all lists
    const combinedFilterData = [
      ...filterDataList1,
      ...filterDataList2,
      ...filterDataList3,
      ...filterDataList4,
      ...filterDataList5,
      ...filterDataList6,
    ];

    this.setState({ filterData: combinedFilterData });
  };

  filterListData = (listData, keyword, titleField, descriptionField) => {
    if (listData && listData.value && keyword) {
      return listData.value.filter((res) => {
        if (res[titleField] && res[titleField] !== null && keyword !== null) {
          // Check if either 'Title' or 'Description' contains the keyword
          const titleMatchesKeyword = res[titleField].toLowerCase().includes(keyword.toLowerCase());
          const descriptionMatchesKeyword =
            res[descriptionField] &&


≈=========
//
Assuming 'result' contains the data fetched from SharePoint

let filterData = result.value.filter((res) => {
  if (res.Title && res.Title != null && this.keyword && this.keyword != null) {
    // Check if either 'Title' or 'Description' contains the keyword
    const titleMatchesKeyword = res.Title.toLowerCase().includes(this.keyword.toLowerCase());
    const descriptionMatchesKeyword = res.Description && res.Description.toLowerCase().includes(this.keyword.toLowerCase());

    return titleMatchesKeyword || descriptionMatchesKeyword;
  } else {
    return false;
  }
});




let filterData = result.value.filter((res) => {
            
                            if(res.Title && res.Title!=null &&this.keyword && this.keyword!=null )
            
            
                          return res.Title.toLowerCase().includes(this.keyword.toLowerCase())

===========<!DOCTYPE html>
<html>
<head>
    <title>SharePoint Search API Example with POST and jQuery Ajax</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>SharePoint Search</h1>
    <input type="text" id="searchInput" placeholder="Enter keyword">
    <button onclick="searchDocuments()">Search</button>
    <div id="searchResults"></div>

    <script>
        function searchDocuments() {
            var keyword = document.getElementById('searchInput').value;
            var path = "/sites/your-site/subsite"; // Replace with your SharePoint path
            var endpointUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/search/postquery";

            var searchQuery = {
                'request': {
                    '__metadata': { 'type': 'Microsoft.Office.Server.Search.REST.SearchRequest' },
                    'Querytext': `${keyword} path:${path}`,
                    'RowLimit': 10,
                    'SelectProperties': {
                        'results': ['Title', 'Path']
                    }
                }
            };

            $.ajax({
                url: endpointUrl,
                type: "POST",
                data: JSON.stringify(searchQuery),
                contentType: "application/json;odata=verbose",
                headers: {
                    "Accept": "application/json;odata=verbose",
                },
                success: function (data) {
                    displayResults(data.d.postquery.PrimaryQueryResult.RelevantResults.Table.Rows);
                },
                error: function (error) {
                    console.log("Error: " + JSON.stringify(error));
                }
            });
        }

        function displayResults(results) {
            var searchResultsDiv = document.getElementById('searchResults');
            searchResultsDiv.innerHTML = '';

            if (results.length > 0) {
                for (var i = 0; i < results.length; i++) {
                    var result = results[i].Cells.results;
                    var title = result.find(function (item) { return item.Key === "Title"; }).Value;
                    var path = result.find(function (item) { return item.Key === "Path"; }).Value;

                    var link = document.createElement('a');
                    link.href = path;
                    link.textContent = title;

                    var resultDiv = document.createElement('div');
                    resultDiv.appendChild(link);

                    searchResultsDiv.appendChild(resultDiv);
                }
            } else {
                searchResultsDiv.textContent = "No results found.";
            }
        }
    </script>
</body>
</html>

===========
import * as React from "react";
import { performSearch } from "./MySearchUtil"; // Replace with the path to your search utility file

interface IMySearchComponentProps {
  siteUrl: string;
}

interface IMySearchComponentState {
  searchResults: any[];
}

export default class MySearchComponent extends React.Component<
  IMySearchComponentProps,
  IMySearchComponentState
> {
  constructor(props: IMySearchComponentProps) {
    super(props);
    this.state = {
      searchResults: [],
    };
  }

  async componentDidMount() {
    const { siteUrl } = this.props;
    const keyword = "your_keyword_here";
    const startRow = 0;
    const rowLimit = 10;
    const selectProperties = ["Title", "Path"];

    const results = await performSearch(siteUrl, keyword, startRow, rowLimit, selectProperties);
    this.setState({ searchResults: results });
  }

  render() {
    return (
      <div>
        <h1>Search Results</h1>
        <ul>
          {this.state.searchResults.map((item) => (
            <li key={item.UniqueId}>
              <a href={item.Path}>{item.Title}</a>
            </li>
          ))}
        </ul>
      </div>
    );
  }
}


≈=====≈=====

export default class MySearchWebPart extends React.Component<IMySearchWebPartProps, any> {
  public constructor(props: IMySearchWebPartProps) {
    super(props);
    this.state = {
      searchResults: []
    };
  }

  public componentDidMount() {
    // Perform the search
    this.searchDocuments('your_keyword_here');
  }

  private async searchDocuments(keyword: string) {
    try {
      const searchQuery: SearchQuery = {
        Querytext: keyword,
        RowLimit: 10,
        SelectProperties: ["Title", "Path"]
      };

      const results: SearchResults = await sp.search(searchQuery);

      this.setState({ searchResults: results.PrimarySearchResults });
    } catch (error) {
      console.log('Error:', error);
    }
  }

  public render(): React.ReactElement<IMySearchWebPartProps> {
    return (
      <div>
        <h1>Search Results</h1>
        <ul>
          {this.state.searchResults.map((item: any) => (
            <li key={item.UniqueId}>
              <a href={item.Path}>{item.Title}</a>
            </li>
          ))}
        </ul>
      </div>
    );
  }
}


=========

<!DOCTYPE html>
<html>
<head>
    <title>SharePoint Search API Example with POST and Ajax</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>SharePoint Search</h1>
    <input type="text" id="searchInput" placeholder="Enter keyword">
    <button onclick="searchDocuments()">Search</button>
    <div id="searchResults"></div>

    <script>
        function searchDocuments() {
            var keyword = document.getElementById('searchInput').value;
            var endpointUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/search/postquery";

            var searchQuery = {
                'request': {
                    '__metadata': { 'type': 'Microsoft.Office.Server.Search.REST.SearchRequest' },
                    'Querytext': keyword,
                    'RowLimit': 10,
                    'SelectProperties': {
                        'results': ['Title', 'Path']
                    }
                }
            };

            $.ajax({
                url: endpointUrl,
                type: "POST",
                data: JSON.stringify(searchQuery),
                contentType: "application/json;odata=verbose",
                headers: {
                    "Accept": "application/json;odata=verbose",
                },
                success: function (data) {
                    displayResults(data.d.postquery.PrimaryQueryResult.RelevantResults.Table.Rows);
                },
                error: function (error) {
                    console.log("Error: " + JSON.stringify(error));
                }
            });
        }

        function displayResults(results) {
            // Same displayResults() function as in the previous example
        }
    </script>
</body>
</html>

≈======4==

<!DOCTYPE html>
<html>
<head>
    <title>SharePoint Search API Example with REST and Ajax</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>SharePoint Search</h1>
    <input type="text" id="searchInput" placeholder="Enter keyword">
    <button onclick="searchDocuments()">Search</button>
    <div id="searchResults"></div>

    <script>
        function searchDocuments() {
            var keyword = document.getElementById('searchInput').value;
            var endpointUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/search/query?querytext='" + keyword + "'";

            $.ajax({
                url: endpointUrl,
                type: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose",
                },
                success: function (data) {
                    displayResults(data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows);
                },
                error: function (error) {
                    console.log("Error: " + JSON.stringify(error));
                }
            });
        }

        function displayResults(results) {
            var searchResultsDiv = document.getElementById('searchResults');
            searchResultsDiv.innerHTML = '';

            if (results.length > 0) {
                for (var i = 0; i < results.length; i++) {
                    var result = results[i].Cells.results;
                    var title = result.find(function (item) { return item.Key === "Title"; }).Value;
                    var path = result.find(function (item) { return item.Key === "Path"; }).Value;

                    var link = document.createElement('a');
                    link.href = path;
                    link.textContent = title;

                    var resultDiv = document.createElement('div');
                    resultDiv.appendChild(link);

                    searchResultsDiv.appendChild(resultDiv);
                }
            } else {
                searchResultsDiv.textContent = "No results found.";
            }
        }
    </script>
</body>
</html>

=========
$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();
    var keyword = 'your-keyword';
    var pathUrl = 'https://your-sharepoint-site';

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': 'Path:"' + pathUrl + '" ContentClass:STS_ListItem_GenericList ' + searchTerm + ' ' + keyword,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path,RefinableString01,RefinableInt01', // Select specific properties, including refinable properties
        'trimduplicates': true // Trim duplicates
      }
    })
    .then(function(data) {
      // Process the search results
      var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
      results.forEach(function(result) {
        var title = result.Cells.results.find(function(cell) {
          return cell.Key === "Title";
        }).Value;
        var path = result.Cells.results.find(function(cell) {
          return cell.Key === "Path";
        }).Value;
        var refinableString = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableString01";
        }).Value;
        var refinableInt = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableInt01";
        }).Value;
        console.log(title + " - " + path + " - " + refinableString + " - " + refinableInt);
      });
    })
    .fail(function(error) {
      console.log(error);
    });
  });
});

===========$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path,RefinableString01,RefinableInt01', // Select specific properties, including refinable properties
        'trimduplicates': true // Trim duplicates
      }
    })
    .then(function(data) {
      // Process the search results
      var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
      results.forEach(function(result) {
        var title = result.Cells.results.find(function(cell) {
          return cell.Key === "Title";
        }).Value;
        var path = result.Cells.results.find(function(cell) {
          return cell.Key === "Path";
        }).Value;
        var refinableString = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableString01";
        }).Value;
        var refinableInt = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableInt01";
        }).Value;
        console.log(title + " - " + path + " - " + refinableString + " - " + refinableInt);
      });
    })
    .fail(function(error) {
      console.log(error);
    });
  });
});

======================$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path', // Select specific properties
        'trimduplicates': true // Trim duplicates
      }
    })
    .then(function(data) {
      // Process the search results
      var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
      results.forEach(function(result) {
        var title = result.Cells.results.find(function(cell) {
          return cell.Key === "Title";
        }).Value;
        var path = result.Cells.results.find(function(cell) {
          return cell.Key === "Path";
        }).Value;
        console.log(title + " - " + path);
      });
    })
    .fail(function(error) {
      console.log(error);
    });
  });
});
========
$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path', // Select specific properties
        'trimduplicates': true // Trim duplicates
      },
      success: function(data) {
        // Process the search results
        var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
        results.forEach(function(result) {
          var title = result.Cells.results.find(function(cell) {
            return cell.Key === "Title";
          }).Value;
          var path = result.Cells.results.find(function(cell) {
            return cell.Key === "Path";
          }).Value;
          console.log(title + " - " + path);
        });
      },
      error: function(error) {
        console.log(error);
      }
    });
  });
});


=====================


$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm
      },
      success: function(data) {
        // Process the search results
        var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
        results.forEach(function(result) {
          var title = result.Cells.results.find(function(cell) {
            return cell.Key === "Title";
          }).Value;
          console.log(title);
        });
      },
      error: function(error) {
        console.log(error);
      }
    });
  });
});

=====================function detectInternetExplorer() {
  var userAgent = window.navigator.userAgent;
  var isIE = userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
  if (isIE) {
    alert("Please note that this site may have limited compatibility with Internet Explorer. We recommend using a modern browser like Chrome for the best experience.");

    var siteUrl = window.location.href;
    var chromeUrl = "googlechrome://navigate?url=" + encodeURIComponent(siteUrl);
    window.open(chromeUrl);
  }
}

// Call the function to detect Internet Explorer, display the alert message, and open the site in Chrome
detectInternetExplorer();

=======function detectInternetExplorer() {
  var userAgent = window.navigator.userAgent;
  var isIE = userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
  if (isIE) {
    alert("Please note that this site may have limited compatibility with Internet Explorer. We recommend using a modern browser for the best experience.");
  }
}

// Call the function to detect Internet Explorer and display the alert message
detectInternetExplorer();

=====================function bindItemsToDropdown() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>200</RowLimit></View>"); // Adjust the RowLimit as needed (max 500 for compatibility with IE)
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      var dropdown = document.getElementById("your-dropdown-id"); // Replace with the ID of your dropdown element
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        var option = document.createElement("option");
        option.value = listItem.get_id();
        option.text = title;
        dropdown.appendChild(option);
      }

      // Check if there are more items to retrieve
      if (items.get_count() >= camlQuery.get_listItemCollectionPosition().get_pagingInfo()) {
        camlQuery.set_listItemCollectionPosition(items.get_listItemCollectionPosition());
        bindItemsToDropdown();
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to bind items to the dropdown
bindItemsToDropdown();

=======================================
function retrieveListItems() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>200</RowLimit></View>"); // Adjust the RowLimit as needed (max 500 for compatibility with IE)
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        // Bind the title to your UI element (e.g., add to dropdown, create HTML elements, etc.)
        // Example: document.getElementById("your-dropdown-id").add(new Option(title, title));
      }

      // Check if there are more items to retrieve
      if (items.get_count() >= camlQuery.get_listItemCollectionPosition().get_pagingInfo()) {
        camlQuery.set_listItemCollectionPosition(items.get_listItemCollectionPosition());
        retrieveListItems();
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and bind them to the UI element
retrieveListItems();

===============

function retrieveListItems() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>500</RowLimit></View>"); // Adjust the RowLimit as needed
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        // Bind the title to your UI element (e.g., add to dropdown, create HTML elements, etc.)
        // Example: document.getElementById("your-dropdown-id").add(new Option(title, title));
      }

      // Check if there are more items to retrieve
      if (items.get_listItemCollectionPosition()) {
        retrieveNextBatch(items.get_listItemCollectionPosition());
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

function retrieveNextBatch(position) {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>500</RowLimit></View>"); // Adjust the RowLimit as needed
  camlQuery.set_listItemCollectionPosition(position);
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        // Bind the title to your UI element (e.g., add to dropdown, create HTML elements, etc.)
        // Example: document.getElementById("your-dropdown-id").add(new Option(title, title));
      }

      // Check if there are more items to retrieve
      if (items.get_listItemCollectionPosition()) {
        retrieveNextBatch(items.get_listItemCollectionPosition());
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and bind them to the UI element
retrieveListItems();

================

function retrieveListItems() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>5000</RowLimit></View>"); // Adjust the RowLimit as needed
  var items = list.getItems(camlQuery);
  context.load(items, "Include(Title)"); // Include the "Title" column in the load statement
  context.executeQueryAsync(
    function() {
      // Success
      var titleArray = [];
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve
        titleArray.push(title);
      }
      console.log(titleArray); // Output the array of title values
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and store the "Title" column values in an array
retrieveListItems();

======================<script type="text/javascript" src="/_layouts/15/init.js"></script>
<script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
<script type="text/javascript" src="/_layouts/15/sp.core.js"></script>
<script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
<script type="text/javascript" src="/_layouts/15/sp.js"></script>

============function retrieveListItemsAndBindToDropdown() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>5000</RowLimit></View>"); // Adjust the RowLimit as needed
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var dropdown = document.getElementById("your-dropdown-id"); // Replace with the ID of your dropdown element
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to display

        var option = document.createElement("option");
        option.value = listItem.get_id();
        option.text = title;
        dropdown.appendChild(option);
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and bind them to the dropdown
retrieveListItemsAndBindToDropdown();

=======================function retrieveListItems() {
  var siteUrl = "https://your-site-url";
  var listName = "Your List Name";
  var itemCount = 0;
  var items = [];

  retrieveItems();

  function retrieveItems() {
    var soapEnvelope =
      "<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>" +
      "<soapenv:Body>" +
      "<GetListItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" +
      "<listName>" + listName + "</listName>" +
      "<query></query>" +
      "<viewFields></viewFields>" +
      "<rowLimit>5000</rowLimit>" +
      "<queryOptions>" +
      "<QueryOptions>" +
      "<ViewAttributes Scope='RecursiveAll' />" +
      "<Paging ListItemCollectionPositionNext=''></Paging>" +
      "</QueryOptions>" +
      "</queryOptions>" +
      "</GetListItems>" +
      "</soapenv:Body>" +
      "</soapenv:Envelope>";

    $.ajax({
      url: siteUrl + "/_vti_bin/lists.asmx",
      type: "POST",
      dataType: "xml",
      data: soapEnvelope,
      complete: function (xData, status) {
        $(xData.responseXML)
          .find("z\\:row, row") // Handle both standard and z:row namespace
          .each(function () {
            // Process the retrieved item
            items.push($(this).attr("ows_Title"));
          });

        var positionNext = $(xData.responseXML)
          .find("rs\\:data, data")
          .attr("ItemCount");

        if (positionNext != null && positionNext !== "") {
          retrieveItems(); // Retrieve the next batch
        } else {
          console.log("All items retrieved:");
          console.log(items);
        }
      },
      contentType: "text/xml; charset=utf-8",
      error: function (xhr, ajaxOptions, thrownError) {
        console.log(xhr.status + " " + thrownError);
      }
    });
  }
}

// Call the function to retrieve the list items
retrieveListItems();

===========================

// Set up the SharePoint SOAP endpoint URL
var serviceUrl = "http://yoursharepointsite.com/_vti_bin/lists.asmx";

// Set up the SOAP request
var soapEnvelope =
    '<?xml version="1.0" encoding="utf-8"?>' +
    '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
    '               xmlns:xsd="http://www.w3.org/2001/XMLSchema" ' +
    '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
    '  <soap:Body>' +
    '    <GetListItems xmlns="http://schemas.microsoft.com/sharepoint/soap/">' +
    '      <listName>your_list_name</listName>' +
    '      <rowLimit>1000</rowLimit>' +
    '      <query>' +
    '        <Query></Query>' +
    '      </query>' +
    '      <viewFields>' +
    '        <ViewFields></ViewFields>' +
    '      </viewFields>' +
    '      <queryOptions>' +
    '        <QueryOptions>' +
    '          <Paging ListItemCollectionPositionNext=""></Paging>' +
    '        </QueryOptions>' +
    '      </queryOptions>' +
    '    </GetListItems>' +
    '  </soap:Body>' +
    '</soap:Envelope>';

// Create the SOAP client and send the request
var xmlhttp = new XMLHttpRequest();
xmlhttp.open("POST", serviceUrl, false);
xmlhttp.setRequestHeader("Content-Type", "text/xml;charset=utf-8");
xmlhttp.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/GetListItems");
xmlhttp.send(soapEnvelope);

// Process the first batch of retrieved items
var responseXml = xmlhttp.responseXML;
// ...


========================================
// Function to retrieve SharePoint list items using REST API
async function getListItems(url, listName, items = [], skiptoken = '') {
  const endpointUrl = `${url}/_vti_bin/ListData.svc/${listName}`;

  // Prepare the URL with query parameters
  const queryUrl = `${endpointUrl}?$top=2000${skiptoken ? `&$skiptoken=${encodeURIComponent(skiptoken)}` : ''}`;

  // Make a GET request to retrieve list items
  const response = await fetch(queryUrl);
  const data = await response.json();

  // Process the retrieved items
  items = items.concat(data.d.results);

  // Check if there are more items to retrieve
  if (data.d.__next) {
    // Extract the skiptoken from the __next URL
    const nextUrl = new URL(data.d.__next);
    const nextSkiptoken = nextUrl.searchParams.get('$skiptoken');

    // Recursively call the function to retrieve the next batch of items
    items = await getListItems(url, listName, items, nextSkiptoken);
  }

  return items;
}

// Usage
const url = 'http://your-sharepoint-site';
const listName = 'YourListName';

getListItems(url, listName)
  .then(items => {
    // Process the retrieved items
    console.log(items);
  })
  .catch(error => {
    // Handle any errors
    console.error(error);
  });
=============================================
function getUnmatchedData(arr1, arr2) {
  var unmatchedData = [];

  for (var i = 0; i < arr1.length; i++) {
    if (arr2.indexOf(arr1[i]) === -1) {
      unmatchedData.push(arr1[i]);
    }
  }
  
  for (var j = 0; j < arr2.length; j++) {
    if (arr1.indexOf(arr2[j]) === -1) {
      unmatchedData.push(arr2[j]);
    }
  }

  return unmatchedData;
}

// Example usage
var array1 = [1, 2, 3, 4];
var array2 = [3, 4, 5, 6];

var unmatched = getUnmatchedData(array1, array2);
console.log(unmatched);
===========================================================
var selectElement = document.getElementById("yourSelectElementId");
var endpointUrl = "https://your-sharepoint-site/_vti_bin/ListData.svc/YourListTitle";

// Make the REST API call to retrieve list items
var xhr = new XMLHttpRequest();
xhr.open("GET", endpointUrl, true);
xhr.setRequestHeader("Accept", "application/json");
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    var response = JSON.parse(xhr.responseText);
    var items = response.d.results;
    
    // Append each item to the select dropdown
    for (var i = 0; i < items.length; i++) {
      var option = document.createElement("option");
      option.value = items[i].Id;
      option.textContent = items[i].Title;
      selectElement.appendChild(option);
    }
  }
};
xhr.send();

=======================
fetch("https://your-sharepoint-site/_api/web/lists/getByTitle('YourListTitle')/items", {
  headers: { "Accept": "application/json;odata=nometadata" }
})
.then(response => response.json())
.then(data => {
  var items = data.value;
  
  // Append each item to the select dropdown
  for (var i = 0; i < items.length; i++) {
    var option = document.createElement("option");
    option.value = items[i].Id;
    option.textContent = items[i].Title;
    document.getElementById("yourSelectElementId").appendChild(option);
  }
})
.catch(error => console.log(error));


====import { sp } from "@pnp/sp/presets/all";

const subsiteUrl = "https://yourtenant.sharepoint.com/sites/yoursite/subsite";
const listTitle = "YourListTitle";

sp.web.getList(`${subsiteUrl}/Lists/${listTitle}`).items.get().then((items) => {
  items.forEach((item) => {
    console.log(`Item title: ${item.Title}`);
  });
});
