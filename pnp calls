<!DOCTYPE html>
<html>
<head>
    <title>SharePoint Search API Example with REST and Ajax</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>SharePoint Search</h1>
    <input type="text" id="searchInput" placeholder="Enter keyword">
    <button onclick="searchDocuments()">Search</button>
    <div id="searchResults"></div>

    <script>
        function searchDocuments() {
            var keyword = document.getElementById('searchInput').value;
            var endpointUrl = _spPageContextInfo.siteAbsoluteUrl + "/_api/search/query?querytext='" + keyword + "'";

            $.ajax({
                url: endpointUrl,
                type: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose",
                },
                success: function (data) {
                    displayResults(data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows);
                },
                error: function (error) {
                    console.log("Error: " + JSON.stringify(error));
                }
            });
        }

        function displayResults(results) {
            var searchResultsDiv = document.getElementById('searchResults');
            searchResultsDiv.innerHTML = '';

            if (results.length > 0) {
                for (var i = 0; i < results.length; i++) {
                    var result = results[i].Cells.results;
                    var title = result.find(function (item) { return item.Key === "Title"; }).Value;
                    var path = result.find(function (item) { return item.Key === "Path"; }).Value;

                    var link = document.createElement('a');
                    link.href = path;
                    link.textContent = title;

                    var resultDiv = document.createElement('div');
                    resultDiv.appendChild(link);

                    searchResultsDiv.appendChild(resultDiv);
                }
            } else {
                searchResultsDiv.textContent = "No results found.";
            }
        }
    </script>
</body>
</html>

=========
$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();
    var keyword = 'your-keyword';
    var pathUrl = 'https://your-sharepoint-site';

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': 'Path:"' + pathUrl + '" ContentClass:STS_ListItem_GenericList ' + searchTerm + ' ' + keyword,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path,RefinableString01,RefinableInt01', // Select specific properties, including refinable properties
        'trimduplicates': true // Trim duplicates
      }
    })
    .then(function(data) {
      // Process the search results
      var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
      results.forEach(function(result) {
        var title = result.Cells.results.find(function(cell) {
          return cell.Key === "Title";
        }).Value;
        var path = result.Cells.results.find(function(cell) {
          return cell.Key === "Path";
        }).Value;
        var refinableString = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableString01";
        }).Value;
        var refinableInt = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableInt01";
        }).Value;
        console.log(title + " - " + path + " - " + refinableString + " - " + refinableInt);
      });
    })
    .fail(function(error) {
      console.log(error);
    });
  });
});

===========$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path,RefinableString01,RefinableInt01', // Select specific properties, including refinable properties
        'trimduplicates': true // Trim duplicates
      }
    })
    .then(function(data) {
      // Process the search results
      var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
      results.forEach(function(result) {
        var title = result.Cells.results.find(function(cell) {
          return cell.Key === "Title";
        }).Value;
        var path = result.Cells.results.find(function(cell) {
          return cell.Key === "Path";
        }).Value;
        var refinableString = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableString01";
        }).Value;
        var refinableInt = result.Cells.results.find(function(cell) {
          return cell.Key === "RefinableInt01";
        }).Value;
        console.log(title + " - " + path + " - " + refinableString + " - " + refinableInt);
      });
    })
    .fail(function(error) {
      console.log(error);
    });
  });
});

======================$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path', // Select specific properties
        'trimduplicates': true // Trim duplicates
      }
    })
    .then(function(data) {
      // Process the search results
      var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
      results.forEach(function(result) {
        var title = result.Cells.results.find(function(cell) {
          return cell.Key === "Title";
        }).Value;
        var path = result.Cells.results.find(function(cell) {
          return cell.Key === "Path";
        }).Value;
        console.log(title + " - " + path);
      });
    })
    .fail(function(error) {
      console.log(error);
    });
  });
});
========
$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm,
        'rowlimit': 10, // Row limit
        'startrow': 0, // Start row
        'selectproperties': 'Title,Path', // Select specific properties
        'trimduplicates': true // Trim duplicates
      },
      success: function(data) {
        // Process the search results
        var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
        results.forEach(function(result) {
          var title = result.Cells.results.find(function(cell) {
            return cell.Key === "Title";
          }).Value;
          var path = result.Cells.results.find(function(cell) {
            return cell.Key === "Path";
          }).Value;
          console.log(title + " - " + path);
        });
      },
      error: function(error) {
        console.log(error);
      }
    });
  });
});


=====================


$(document).ready(function() {
  // SharePoint Search API endpoint
  var apiUrl = "https://your-sharepoint-site/_api/search/query";

  // Search button click event handler
  $("#searchButton").click(function() {
    var searchTerm = $("#searchTerm").val();

    // Make AJAX request to the SharePoint Search API endpoint
    $.ajax({
      url: apiUrl,
      method: "GET",
      headers: {
        "Accept": "application/json;odata=verbose",
        "Content-Type": "application/json;odata=verbose"
      },
      data: {
        'querytext': searchTerm
      },
      success: function(data) {
        // Process the search results
        var results = data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results;
        results.forEach(function(result) {
          var title = result.Cells.results.find(function(cell) {
            return cell.Key === "Title";
          }).Value;
          console.log(title);
        });
      },
      error: function(error) {
        console.log(error);
      }
    });
  });
});

=====================function detectInternetExplorer() {
  var userAgent = window.navigator.userAgent;
  var isIE = userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
  if (isIE) {
    alert("Please note that this site may have limited compatibility with Internet Explorer. We recommend using a modern browser like Chrome for the best experience.");

    var siteUrl = window.location.href;
    var chromeUrl = "googlechrome://navigate?url=" + encodeURIComponent(siteUrl);
    window.open(chromeUrl);
  }
}

// Call the function to detect Internet Explorer, display the alert message, and open the site in Chrome
detectInternetExplorer();

=======function detectInternetExplorer() {
  var userAgent = window.navigator.userAgent;
  var isIE = userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
  if (isIE) {
    alert("Please note that this site may have limited compatibility with Internet Explorer. We recommend using a modern browser for the best experience.");
  }
}

// Call the function to detect Internet Explorer and display the alert message
detectInternetExplorer();

=====================function bindItemsToDropdown() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>200</RowLimit></View>"); // Adjust the RowLimit as needed (max 500 for compatibility with IE)
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      var dropdown = document.getElementById("your-dropdown-id"); // Replace with the ID of your dropdown element
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        var option = document.createElement("option");
        option.value = listItem.get_id();
        option.text = title;
        dropdown.appendChild(option);
      }

      // Check if there are more items to retrieve
      if (items.get_count() >= camlQuery.get_listItemCollectionPosition().get_pagingInfo()) {
        camlQuery.set_listItemCollectionPosition(items.get_listItemCollectionPosition());
        bindItemsToDropdown();
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to bind items to the dropdown
bindItemsToDropdown();

=======================================
function retrieveListItems() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>200</RowLimit></View>"); // Adjust the RowLimit as needed (max 500 for compatibility with IE)
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        // Bind the title to your UI element (e.g., add to dropdown, create HTML elements, etc.)
        // Example: document.getElementById("your-dropdown-id").add(new Option(title, title));
      }

      // Check if there are more items to retrieve
      if (items.get_count() >= camlQuery.get_listItemCollectionPosition().get_pagingInfo()) {
        camlQuery.set_listItemCollectionPosition(items.get_listItemCollectionPosition());
        retrieveListItems();
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and bind them to the UI element
retrieveListItems();

===============

function retrieveListItems() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>500</RowLimit></View>"); // Adjust the RowLimit as needed
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        // Bind the title to your UI element (e.g., add to dropdown, create HTML elements, etc.)
        // Example: document.getElementById("your-dropdown-id").add(new Option(title, title));
      }

      // Check if there are more items to retrieve
      if (items.get_listItemCollectionPosition()) {
        retrieveNextBatch(items.get_listItemCollectionPosition());
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

function retrieveNextBatch(position) {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>500</RowLimit></View>"); // Adjust the RowLimit as needed
  camlQuery.set_listItemCollectionPosition(position);
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve

        // Bind the title to your UI element (e.g., add to dropdown, create HTML elements, etc.)
        // Example: document.getElementById("your-dropdown-id").add(new Option(title, title));
      }

      // Check if there are more items to retrieve
      if (items.get_listItemCollectionPosition()) {
        retrieveNextBatch(items.get_listItemCollectionPosition());
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and bind them to the UI element
retrieveListItems();

================

function retrieveListItems() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>5000</RowLimit></View>"); // Adjust the RowLimit as needed
  var items = list.getItems(camlQuery);
  context.load(items, "Include(Title)"); // Include the "Title" column in the load statement
  context.executeQueryAsync(
    function() {
      // Success
      var titleArray = [];
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to retrieve
        titleArray.push(title);
      }
      console.log(titleArray); // Output the array of title values
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and store the "Title" column values in an array
retrieveListItems();

======================<script type="text/javascript" src="/_layouts/15/init.js"></script>
<script type="text/javascript" src="/_layouts/15/MicrosoftAjax.js"></script>
<script type="text/javascript" src="/_layouts/15/sp.core.js"></script>
<script type="text/javascript" src="/_layouts/15/sp.runtime.js"></script>
<script type="text/javascript" src="/_layouts/15/sp.js"></script>

============function retrieveListItemsAndBindToDropdown() {
  var context = SP.ClientContext.get_current();
  var web = context.get_web();
  var list = web.get_lists().getByTitle("Your List Name");
  var camlQuery = new SP.CamlQuery();
  camlQuery.set_viewXml("<View><RowLimit>5000</RowLimit></View>"); // Adjust the RowLimit as needed
  var items = list.getItems(camlQuery);
  context.load(items);
  context.executeQueryAsync(
    function() {
      // Success
      var dropdown = document.getElementById("your-dropdown-id"); // Replace with the ID of your dropdown element
      var enumerator = items.getEnumerator();
      while (enumerator.moveNext()) {
        var listItem = enumerator.get_current();
        var title = listItem.get_item("Title"); // Replace "Title" with the internal name of the column you want to display

        var option = document.createElement("option");
        option.value = listItem.get_id();
        option.text = title;
        dropdown.appendChild(option);
      }
    },
    function(sender, args) {
      // Error
      console.log(args.get_message());
    }
  );
}

// Call the function to retrieve items and bind them to the dropdown
retrieveListItemsAndBindToDropdown();

=======================function retrieveListItems() {
  var siteUrl = "https://your-site-url";
  var listName = "Your List Name";
  var itemCount = 0;
  var items = [];

  retrieveItems();

  function retrieveItems() {
    var soapEnvelope =
      "<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>" +
      "<soapenv:Body>" +
      "<GetListItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" +
      "<listName>" + listName + "</listName>" +
      "<query></query>" +
      "<viewFields></viewFields>" +
      "<rowLimit>5000</rowLimit>" +
      "<queryOptions>" +
      "<QueryOptions>" +
      "<ViewAttributes Scope='RecursiveAll' />" +
      "<Paging ListItemCollectionPositionNext=''></Paging>" +
      "</QueryOptions>" +
      "</queryOptions>" +
      "</GetListItems>" +
      "</soapenv:Body>" +
      "</soapenv:Envelope>";

    $.ajax({
      url: siteUrl + "/_vti_bin/lists.asmx",
      type: "POST",
      dataType: "xml",
      data: soapEnvelope,
      complete: function (xData, status) {
        $(xData.responseXML)
          .find("z\\:row, row") // Handle both standard and z:row namespace
          .each(function () {
            // Process the retrieved item
            items.push($(this).attr("ows_Title"));
          });

        var positionNext = $(xData.responseXML)
          .find("rs\\:data, data")
          .attr("ItemCount");

        if (positionNext != null && positionNext !== "") {
          retrieveItems(); // Retrieve the next batch
        } else {
          console.log("All items retrieved:");
          console.log(items);
        }
      },
      contentType: "text/xml; charset=utf-8",
      error: function (xhr, ajaxOptions, thrownError) {
        console.log(xhr.status + " " + thrownError);
      }
    });
  }
}

// Call the function to retrieve the list items
retrieveListItems();

===========================

// Set up the SharePoint SOAP endpoint URL
var serviceUrl = "http://yoursharepointsite.com/_vti_bin/lists.asmx";

// Set up the SOAP request
var soapEnvelope =
    '<?xml version="1.0" encoding="utf-8"?>' +
    '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
    '               xmlns:xsd="http://www.w3.org/2001/XMLSchema" ' +
    '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
    '  <soap:Body>' +
    '    <GetListItems xmlns="http://schemas.microsoft.com/sharepoint/soap/">' +
    '      <listName>your_list_name</listName>' +
    '      <rowLimit>1000</rowLimit>' +
    '      <query>' +
    '        <Query></Query>' +
    '      </query>' +
    '      <viewFields>' +
    '        <ViewFields></ViewFields>' +
    '      </viewFields>' +
    '      <queryOptions>' +
    '        <QueryOptions>' +
    '          <Paging ListItemCollectionPositionNext=""></Paging>' +
    '        </QueryOptions>' +
    '      </queryOptions>' +
    '    </GetListItems>' +
    '  </soap:Body>' +
    '</soap:Envelope>';

// Create the SOAP client and send the request
var xmlhttp = new XMLHttpRequest();
xmlhttp.open("POST", serviceUrl, false);
xmlhttp.setRequestHeader("Content-Type", "text/xml;charset=utf-8");
xmlhttp.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/GetListItems");
xmlhttp.send(soapEnvelope);

// Process the first batch of retrieved items
var responseXml = xmlhttp.responseXML;
// ...


========================================
// Function to retrieve SharePoint list items using REST API
async function getListItems(url, listName, items = [], skiptoken = '') {
  const endpointUrl = `${url}/_vti_bin/ListData.svc/${listName}`;

  // Prepare the URL with query parameters
  const queryUrl = `${endpointUrl}?$top=2000${skiptoken ? `&$skiptoken=${encodeURIComponent(skiptoken)}` : ''}`;

  // Make a GET request to retrieve list items
  const response = await fetch(queryUrl);
  const data = await response.json();

  // Process the retrieved items
  items = items.concat(data.d.results);

  // Check if there are more items to retrieve
  if (data.d.__next) {
    // Extract the skiptoken from the __next URL
    const nextUrl = new URL(data.d.__next);
    const nextSkiptoken = nextUrl.searchParams.get('$skiptoken');

    // Recursively call the function to retrieve the next batch of items
    items = await getListItems(url, listName, items, nextSkiptoken);
  }

  return items;
}

// Usage
const url = 'http://your-sharepoint-site';
const listName = 'YourListName';

getListItems(url, listName)
  .then(items => {
    // Process the retrieved items
    console.log(items);
  })
  .catch(error => {
    // Handle any errors
    console.error(error);
  });
=============================================
function getUnmatchedData(arr1, arr2) {
  var unmatchedData = [];

  for (var i = 0; i < arr1.length; i++) {
    if (arr2.indexOf(arr1[i]) === -1) {
      unmatchedData.push(arr1[i]);
    }
  }
  
  for (var j = 0; j < arr2.length; j++) {
    if (arr1.indexOf(arr2[j]) === -1) {
      unmatchedData.push(arr2[j]);
    }
  }

  return unmatchedData;
}

// Example usage
var array1 = [1, 2, 3, 4];
var array2 = [3, 4, 5, 6];

var unmatched = getUnmatchedData(array1, array2);
console.log(unmatched);
===========================================================
var selectElement = document.getElementById("yourSelectElementId");
var endpointUrl = "https://your-sharepoint-site/_vti_bin/ListData.svc/YourListTitle";

// Make the REST API call to retrieve list items
var xhr = new XMLHttpRequest();
xhr.open("GET", endpointUrl, true);
xhr.setRequestHeader("Accept", "application/json");
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    var response = JSON.parse(xhr.responseText);
    var items = response.d.results;
    
    // Append each item to the select dropdown
    for (var i = 0; i < items.length; i++) {
      var option = document.createElement("option");
      option.value = items[i].Id;
      option.textContent = items[i].Title;
      selectElement.appendChild(option);
    }
  }
};
xhr.send();

=======================
fetch("https://your-sharepoint-site/_api/web/lists/getByTitle('YourListTitle')/items", {
  headers: { "Accept": "application/json;odata=nometadata" }
})
.then(response => response.json())
.then(data => {
  var items = data.value;
  
  // Append each item to the select dropdown
  for (var i = 0; i < items.length; i++) {
    var option = document.createElement("option");
    option.value = items[i].Id;
    option.textContent = items[i].Title;
    document.getElementById("yourSelectElementId").appendChild(option);
  }
})
.catch(error => console.log(error));


====import { sp } from "@pnp/sp/presets/all";

const subsiteUrl = "https://yourtenant.sharepoint.com/sites/yoursite/subsite";
const listTitle = "YourListTitle";

sp.web.getList(`${subsiteUrl}/Lists/${listTitle}`).items.get().then((items) => {
  items.forEach((item) => {
    console.log(`Item title: ${item.Title}`);
  });
});
