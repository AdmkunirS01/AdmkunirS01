function retrieveListItems() {
  var siteUrl = "https://your-site-url";
  var listName = "Your List Name";
  var itemCount = 0;
  var items = [];

  retrieveItems();

  function retrieveItems() {
    var soapEnvelope =
      "<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>" +
      "<soapenv:Body>" +
      "<GetListItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" +
      "<listName>" + listName + "</listName>" +
      "<query></query>" +
      "<viewFields></viewFields>" +
      "<rowLimit>5000</rowLimit>" +
      "<queryOptions>" +
      "<QueryOptions>" +
      "<ViewAttributes Scope='RecursiveAll' />" +
      "<Paging ListItemCollectionPositionNext=''></Paging>" +
      "</QueryOptions>" +
      "</queryOptions>" +
      "</GetListItems>" +
      "</soapenv:Body>" +
      "</soapenv:Envelope>";

    $.ajax({
      url: siteUrl + "/_vti_bin/lists.asmx",
      type: "POST",
      dataType: "xml",
      data: soapEnvelope,
      complete: function (xData, status) {
        $(xData.responseXML)
          .find("z\\:row, row") // Handle both standard and z:row namespace
          .each(function () {
            // Process the retrieved item
            items.push($(this).attr("ows_Title"));
          });

        var positionNext = $(xData.responseXML)
          .find("rs\\:data, data")
          .attr("ItemCount");

        if (positionNext != null && positionNext !== "") {
          retrieveItems(); // Retrieve the next batch
        } else {
          console.log("All items retrieved:");
          console.log(items);
        }
      },
      contentType: "text/xml; charset=utf-8",
      error: function (xhr, ajaxOptions, thrownError) {
        console.log(xhr.status + " " + thrownError);
      }
    });
  }
}

// Call the function to retrieve the list items
retrieveListItems();

===========================

// Set up the SharePoint SOAP endpoint URL
var serviceUrl = "http://yoursharepointsite.com/_vti_bin/lists.asmx";

// Set up the SOAP request
var soapEnvelope =
    '<?xml version="1.0" encoding="utf-8"?>' +
    '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
    '               xmlns:xsd="http://www.w3.org/2001/XMLSchema" ' +
    '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
    '  <soap:Body>' +
    '    <GetListItems xmlns="http://schemas.microsoft.com/sharepoint/soap/">' +
    '      <listName>your_list_name</listName>' +
    '      <rowLimit>1000</rowLimit>' +
    '      <query>' +
    '        <Query></Query>' +
    '      </query>' +
    '      <viewFields>' +
    '        <ViewFields></ViewFields>' +
    '      </viewFields>' +
    '      <queryOptions>' +
    '        <QueryOptions>' +
    '          <Paging ListItemCollectionPositionNext=""></Paging>' +
    '        </QueryOptions>' +
    '      </queryOptions>' +
    '    </GetListItems>' +
    '  </soap:Body>' +
    '</soap:Envelope>';

// Create the SOAP client and send the request
var xmlhttp = new XMLHttpRequest();
xmlhttp.open("POST", serviceUrl, false);
xmlhttp.setRequestHeader("Content-Type", "text/xml;charset=utf-8");
xmlhttp.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/GetListItems");
xmlhttp.send(soapEnvelope);

// Process the first batch of retrieved items
var responseXml = xmlhttp.responseXML;
// ...


========================================
// Function to retrieve SharePoint list items using REST API
async function getListItems(url, listName, items = [], skiptoken = '') {
  const endpointUrl = `${url}/_vti_bin/ListData.svc/${listName}`;

  // Prepare the URL with query parameters
  const queryUrl = `${endpointUrl}?$top=2000${skiptoken ? `&$skiptoken=${encodeURIComponent(skiptoken)}` : ''}`;

  // Make a GET request to retrieve list items
  const response = await fetch(queryUrl);
  const data = await response.json();

  // Process the retrieved items
  items = items.concat(data.d.results);

  // Check if there are more items to retrieve
  if (data.d.__next) {
    // Extract the skiptoken from the __next URL
    const nextUrl = new URL(data.d.__next);
    const nextSkiptoken = nextUrl.searchParams.get('$skiptoken');

    // Recursively call the function to retrieve the next batch of items
    items = await getListItems(url, listName, items, nextSkiptoken);
  }

  return items;
}

// Usage
const url = 'http://your-sharepoint-site';
const listName = 'YourListName';

getListItems(url, listName)
  .then(items => {
    // Process the retrieved items
    console.log(items);
  })
  .catch(error => {
    // Handle any errors
    console.error(error);
  });
=============================================
function getUnmatchedData(arr1, arr2) {
  var unmatchedData = [];

  for (var i = 0; i < arr1.length; i++) {
    if (arr2.indexOf(arr1[i]) === -1) {
      unmatchedData.push(arr1[i]);
    }
  }
  
  for (var j = 0; j < arr2.length; j++) {
    if (arr1.indexOf(arr2[j]) === -1) {
      unmatchedData.push(arr2[j]);
    }
  }

  return unmatchedData;
}

// Example usage
var array1 = [1, 2, 3, 4];
var array2 = [3, 4, 5, 6];

var unmatched = getUnmatchedData(array1, array2);
console.log(unmatched);
===========================================================
var selectElement = document.getElementById("yourSelectElementId");
var endpointUrl = "https://your-sharepoint-site/_vti_bin/ListData.svc/YourListTitle";

// Make the REST API call to retrieve list items
var xhr = new XMLHttpRequest();
xhr.open("GET", endpointUrl, true);
xhr.setRequestHeader("Accept", "application/json");
xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    var response = JSON.parse(xhr.responseText);
    var items = response.d.results;
    
    // Append each item to the select dropdown
    for (var i = 0; i < items.length; i++) {
      var option = document.createElement("option");
      option.value = items[i].Id;
      option.textContent = items[i].Title;
      selectElement.appendChild(option);
    }
  }
};
xhr.send();

=======================
fetch("https://your-sharepoint-site/_api/web/lists/getByTitle('YourListTitle')/items", {
  headers: { "Accept": "application/json;odata=nometadata" }
})
.then(response => response.json())
.then(data => {
  var items = data.value;
  
  // Append each item to the select dropdown
  for (var i = 0; i < items.length; i++) {
    var option = document.createElement("option");
    option.value = items[i].Id;
    option.textContent = items[i].Title;
    document.getElementById("yourSelectElementId").appendChild(option);
  }
})
.catch(error => console.log(error));


====import { sp } from "@pnp/sp/presets/all";

const subsiteUrl = "https://yourtenant.sharepoint.com/sites/yoursite/subsite";
const listTitle = "YourListTitle";

sp.web.getList(`${subsiteUrl}/Lists/${listTitle}`).items.get().then((items) => {
  items.forEach((item) => {
    console.log(`Item title: ${item.Title}`);
  });
});
